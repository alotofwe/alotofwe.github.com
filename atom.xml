<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[HPA]]></title>
  <subtitle><![CDATA[healthy programmer alotofwe]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-12-17T16:03:21.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[alotofwe]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Onion]]></title>
    <link href="http://yoursite.com/2015/12/18/ksnctf-Onion/"/>
    <id>http://yoursite.com/2015/12/18/ksnctf-Onion/</id>
    <published>2015-12-17T15:51:06.000Z</published>
    <updated>2015-12-17T16:03:21.000Z</updated>
    <content type="html"><![CDATA[<p>まず， <code>Onion 暗号</code> でググりました．</p>
<p>そうするとTorが出てくるので一瞬「Torに関する問題か?」と思いましたが<br>暗号文からはどうもそれが思いつかないため，しばらく考えていたら<br>「エンコードを何重も行う行為として <code>Onion</code> と言っているのでは?」と思いついたので<br>文字列のそれっぽさからBase64のデコードを何重も行っていました．</p>
<p>そうすると，なんだか <code>begin 666 ... end</code> のような文字列が出てきたので<br>また暗号かあと思ってググりました．</p>
<p><code>begin 666</code> でググると <code>uuencode</code> というもののwikiに当たりました．<br>beginではじまりendで終わるところもそれっぽいので，ビンゴのようです．<br>デコードするとフラグが現れます．</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>まず， <code>Onion 暗号</code> でググりました．</p>
<p>そうするとTorが出てくるので一瞬「Torに関する問題か?」と思いましたが<br>暗号文からはどうもそれが思いつかないため，しばらく考えていたら<br>「エンコードを何重も行う行為として <]]>
    </summary>
    
      <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
      <category term="ksnctf" scheme="http://yoursite.com/categories/CTF/ksnctf/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[作るものに対してプライドを持つ]]></title>
    <link href="http://yoursite.com/2015/12/13/%E4%BD%9C%E3%82%8B%E3%82%82%E3%81%AE%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6%E3%83%97%E3%83%A9%E3%82%A4%E3%83%89%E3%82%92%E6%8C%81%E3%81%A4/"/>
    <id>http://yoursite.com/2015/12/13/作るものに対してプライドを持つ/</id>
    <published>2015-12-13T05:06:12.000Z</published>
    <updated>2015-12-13T15:26:00.000Z</updated>
    <content type="html"><![CDATA[<p>この記事は，<a href="http://qiita.com/advent-calendar/2015/pepabo" target="_blank" rel="external">Pepabo Advent Calendar 2015</a>の13日目の記事です．</p>
<hr>
<p>「そういえばまだ何も書いていなかったので，新卒研修についての話を書きます．」<br>と書きましたが，他の方々が詳細にまとめていて，私が何か書くような余地が無くて困っています．</p>
<p>なので，同期のあらみそがまとめた「<a href="http://orzup.hateblo.jp/entry/2015/12/11/090621" target="_blank" rel="external">委員会に出会ったはなし</a>」に乗っかって<br>委員会の一員になっていた人の考えていたことを書こうかと思います．</p>
<hr>
<h3 id="委員会とは">委員会とは</h3><p>「委員会に出会ったはなし」では，</p>
<blockquote>
<p>議題 「クラスのだしもの」「クラスのほにゃらら委員」を決める<br>いつまでも決まらないアレ</p>
</blockquote>
<p>このように説明されています．</p>
<p>私は</p>
<ul>
<li>話し合いの際に何かを率先して決める人がいない</li>
<li>そのため，話し合いが進まず，決めるべきことが何も決まらない</li>
</ul>
<p>という状態が委員会なのかな，と思っています．</p>
<h3 id="顔色をうかがっていたのか?">顔色をうかがっていたのか?</h3><p>あらみそのスライドに書いてあるように，私は委員会になっていたほうのチームである，ねはんにいました．<br>そして，委員会になっていたので</p>
<blockquote>
<p>ねはんには決めるひとが誰もいなかった</p>
</blockquote>
<p>という状態でした．</p>
<p>なぜ，決めるひとがいなかったのでしょうか．<br>チームメンバー全員が，それぞれの顔色をうかがっていたのでしょうか．</p>
<p>私はそうではなかったと思っています．<br>と言うより，私はそれだけではありませんでした．</p>
<p>他のメンバーが頑張って良いアプリを作っているなか，私は適切な「自分ごと化」ができていませんでした．</p>
<h3 id="「自分ごと」の種類">「自分ごと」の種類</h3><p>自分ごと化するということは，何をすることかと言うと<br>対象に自分が関わっていると自覚し<br>そうすることで積極的に関心を持っていくことだと，私は思っていました．</p>
<p>しかし，自分ごと化ができていなかったとは言っても<br>では，作っているアプリに対して興味が無かった，という意味ではありません．</p>
<p>アプリがサービスとしてある程度利用可能になってからは，毎日のようにそれを使っていましたし<br>研修が終わって，アプリに使っているサーバを落とすという時は，少し寂しい思いもしました．</p>
<p>ただ，それはアプリのユーザーとして関心を向けていただけであり<br>開発者として関心を向けていたかと言われると，そうではありませんでした．</p>
<p>つまり，自分がそのアプリを作っている開発陣のひとりである，という自覚に欠けていました．<br>そのため，実際にアプリを使う上で気になる点が浮かんだとしても<br>「ではそれを自分が直そう」という発想に至りづらくなっていました．</p>
<p>委員会の中に居ながら，開発陣の中に居ながら，外から委員会を眺めていました．</p>
<p>モバイルアプリ研修終了後，振り返りをしているときに<br>話し合い中にあまりにも自分の意見を言わないので，<br>スーパーバイザーのokkunに「ファシリテーターになりたいのか?」と聞かれたのですが<br>そうではなく，ただ開発者メンバーになりきれなかったのです．</p>
<h3 id="作るものに対してプライドを持つ">作るものに対してプライドを持つ</h3><p>なぜ，メンバーになりきれなかったのでしょうか．<br>それは，おそらく，作っているアプリに対してプライドが持てていなかったためだと思います．</p>
<p>私の周りの，素晴らしいものを作る人々は，よく<br>「自分が作ったものは，胸を張ってそれについて説明できるようにしたい」<br>というようなことを言っている印象があります．</p>
<p>自分のつくるものに対してきちんとプライドを持てている人たちは，<br>作ったものが，自分の納得できるようなものでないということを許せないのです．</p>
<p>これがきちんとできている人にとっては「何を当たり前のことを言っているんだ」という気持ちかと思います．<br>私も当たり前だとは思うのですが，この時はその当たり前ができなかったのです．</p>
<p>ここで，あらみそのスライドに戻ります．<br>スライドの中で『ハッカーと画家』の一文が引用されています．</p>
<blockquote>
<p>委員会が決めたことは，たとえ大部分のメンバーが<br>それを本当は気に入ってないにしても，そのままになりがちだ</p>
</blockquote>
<p>委員会で決めたから，気に入っていないにしても，そのままになりがちなのでしょうか．<br>それとも，気に入っていないにしてもそのままにしていると，委員会になってしまうのでしょうか．</p>
<p>きっと，そのどちらもあり得るのだろうなと思いました．</p>
<h3 id="どうしてプライドを持てなかったのか">どうしてプライドを持てなかったのか</h3><p>これについては，本当にシンプルな理由でした．</p>
<p>私は全く，アプリに対して真摯ではありませんでした．<br>研修で作るアプリだからと，自分がやりたいことは言語の学習なのだと<br>アプリに背を向けながら開発をしていました．</p>
<p>良いアプリを作ろうと頑張っているチームメンバーに対して，<br>本当に申し訳ないことをしていたなと思っています．</p>
<h3 id="まとめ">まとめ</h3><p>長々と書きましたが，つまり<br>「何かものを作ることを生業にしている人々は，生み出すものに対して真摯に取り組みなさい」<br>という一番基本的な，当たり前の話でした．</p>
<p>自分ごとにすることで，もちろん，必ずし委員会が結成されないというわけではありません．<br>これは，あくまでも私が「これをしなかったら，もしかしたらもっとよくなってたかもなあ」<br>という感想の一部分です．</p>
<p>しかし，多分，この考え方が，委員会を結成する一因を担っていたのかもなあと思います．</p>
<p>書いた話は，よくある当たり前の話かもしれないのですが，反省と再発防止のために，ここに記しておきます．</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>この記事は，<a href="http://qiita.com/advent-calendar/2015/pepabo" target="_blank" rel="external">Pepabo Advent Calendar 2015</a>の13日目の記事です．</p]]>
    </summary>
    
      <category term="読みもの" scheme="http://yoursite.com/categories/%E8%AA%AD%E3%81%BF%E3%82%82%E3%81%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Advent of Code 2015]]></title>
    <link href="http://yoursite.com/2015/12/10/Advent-of-Code-2015/"/>
    <id>http://yoursite.com/2015/12/10/Advent-of-Code-2015/</id>
    <published>2015-12-09T15:43:05.000Z</published>
    <updated>2015-12-12T09:46:56.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://adventofcode.com/" target="_blank" rel="external">http://adventofcode.com/</a></p>
<p>やります．<br>Part Twoは別記事で．</p>
<h3 id="Day_1">Day 1</h3><p><code>++</code> か <code>--</code> するだけ．</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> s; <span class="built_in">cin</span> &gt;&gt;s;</span><br><span class="line">  <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">char</span> c : s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">'('</span>) f++;</span><br><span class="line">    <span class="keyword">else</span> f--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt;f &lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Day_2">Day 2</h3><p>計算するだけ．<br>scanf使えばよかった感．</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; split(<span class="built_in">string</span> &amp;str, <span class="keyword">char</span> delim)&#123;</span><br><span class="line">  <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(str)</span></span>;</span><br><span class="line">  <span class="built_in">string</span> tmp;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">  <span class="keyword">while</span>(getline(ss, tmp, delim)) res.push_back(atoi(tmp.c_str()));</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">string</span> s;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt;s)&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v = split(s, <span class="string">'x'</span>);</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">1e9</span>;</span><br><span class="line">    REP(i, v.size())&#123;</span><br><span class="line">      ans += v[i] * v[(i + <span class="number">1</span>) % (<span class="keyword">int</span>)v.size()] * <span class="number">2</span>;</span><br><span class="line">      m = min(m, v[i] * v[(i + <span class="number">1</span>) % (<span class="keyword">int</span>)v.size()]);</span><br><span class="line">    &#125;</span><br><span class="line">    ans += m;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt;ans &lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Day_3">Day 3</h3><p>座標を(x, y)で表現し，最初にいるところを(0, 0)とする．<br>その後，移動しながら現在地をSetに入れていく．</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span>&lt;<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">namespace</span> <span class="built_in">std</span> &#123;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> P&amp; a, <span class="keyword">const</span> P&amp; b) &#123;</span><br><span class="line">    <span class="keyword">return</span> real(a) != real(b) ? real(a) &lt; real(b) : imag(a) &lt; imag(b);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  P p = P(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">string</span> s; <span class="built_in">cin</span> &gt;&gt;s;</span><br><span class="line">  <span class="built_in">map</span>&lt;<span class="keyword">char</span>, P&gt; m;</span><br><span class="line">  m[<span class="string">'^'</span>] = P(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">  m[<span class="string">'&gt;'</span>] = P(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  m[<span class="string">'v'</span>] = P(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  m[<span class="string">'&lt;'</span>] = P(-<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">set</span>&lt;P&gt; S;</span><br><span class="line">  S.insert(P(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">char</span> c : s)&#123;</span><br><span class="line">    p += m[c];</span><br><span class="line">    S.insert(p);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt;S.size() &lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Day_4">Day 4</h3><p>適当に，0から順にくっつけてハッシュ値を調べる．<br>C++でハッシュ値を求めるのが面倒だったので，rubyで．</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'digest/md5'</span></span><br><span class="line"><span class="constant">N</span> = <span class="number">10000000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span> <span class="title">key</span></span></span><br><span class="line">  <span class="constant">N</span>.times <span class="keyword">do</span> |t|</span><br><span class="line">    md5 = <span class="constant">Digest::MD5</span>.hexdigest(<span class="string">"<span class="subst">#&#123;key&#125;</span><span class="subst">#&#123;t.to_s&#125;</span>"</span>)</span><br><span class="line">    <span class="keyword">return</span> t <span class="keyword">if</span> md5[<span class="number">0</span>, <span class="number">5</span>] == <span class="string">"00000"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">"error"</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts solve(<span class="string">'ckczppom'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Day_5">Day 5</h3><p>3つの条件をチェックしていく．</p>
<p>私は1文字の部分文字列と2文字の部分文字列を <code>map&lt;string, int&gt;</code> に入れ<br>部分文字列とその数を数えていった．</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line">  <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; M;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)s.length(); i++) M[s.substr(i, <span class="number">1</span>)] += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)s.length() - <span class="number">1</span>; i++) M[s.substr(i, <span class="number">2</span>)] += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>, z = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">string</span> vowels[] = &#123;<span class="string">"a"</span>, <span class="string">"e"</span>, <span class="string">"i"</span>, <span class="string">"o"</span>, <span class="string">"u"</span>&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="built_in">string</span> vowel : vowels) x += M[vowel];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="string">'a'</span>; c &lt;= <span class="string">'z'</span>; c++)&#123;</span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    ss &lt;&lt; (<span class="keyword">char</span>)c &lt;&lt; (<span class="keyword">char</span>)c;</span><br><span class="line">    y += M[ss.str()];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">string</span> invalid[] = &#123;<span class="string">"ab"</span>, <span class="string">"cd"</span>, <span class="string">"pq"</span>, <span class="string">"xy"</span>&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="built_in">string</span> inv : invalid) z += M[inv];</span><br><span class="line">  <span class="keyword">return</span> x &gt;= <span class="number">3</span> &amp;&amp; y &gt;= <span class="number">1</span> &amp;&amp; z == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> s;</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt;s) ans += check(s);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt;ans &lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Day_6">Day 6</h3><p>2次元配列をつくって，つけたり消したりしていく．<br>toggleの時だけ単語数が減って不便なので，テストケースを <code>turn toggle</code> に書きかえた．</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> H = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> W = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> v[H][W];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> type, <span class="keyword">int</span> &amp;x1, <span class="keyword">int</span> &amp;y1, <span class="keyword">int</span> &amp;x2, <span class="keyword">int</span> &amp;y2)</span></span>&#123;</span><br><span class="line">  FOR(x, x1, x2 + <span class="number">1</span>)&#123;</span><br><span class="line">    FOR(y, y1, y2 + <span class="number">1</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(type == <span class="number">0</span>) v[x][y] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="number">1</span>) v[x][y] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">else</span> v[x][y] = !v[x][y];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line">  <span class="keyword">int</span> x1, y1, x2, y2;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"turn %s %d,%d through %d,%d\n"</span>, s, &amp;x1, &amp;y1, &amp;x2, &amp;y2) != EOF)&#123;</span><br><span class="line">    <span class="keyword">int</span> type = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(s, <span class="string">"off"</span>) == <span class="number">0</span>) type = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(s, <span class="string">"on"</span>) == <span class="number">0</span>) type = <span class="number">1</span>;</span><br><span class="line">    check(type, x1, y1, x2, y2);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  REP(i, H) REP(j, W) ans += v[i][j];</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt;ans &lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Day_7">Day 7</h3><p>16bitの符号なし整数なので， <code>unsigned short</code> を使う．</p>
<p>変数と数字を対応させるmapを用意する．<br>0~65534を特別扱いするのが面倒なので， <code>(string) n = (unsigned short) n</code> として突っ込んでおく．</p>
<p>最初に，全ての式をqueueに入れる．</p>
<p>順に取り出し，全ての変数が分かっている式であれば，mapに値を反映させる．<br>そうでなければqueueに入れなおす．</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; split(<span class="built_in">string</span> &amp;str, <span class="keyword">char</span> delim)&#123;</span><br><span class="line">  <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(str)</span></span>;</span><br><span class="line">  <span class="built_in">string</span> tmp;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">  <span class="keyword">while</span>(getline(ss, tmp, delim)) res.push_back(tmp);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">unsigned</span> <span class="keyword">short</span>&gt; M;</span><br><span class="line">  REP(i, <span class="number">65535</span>)&#123; <span class="built_in">stringstream</span> ss; ss &lt;&lt; i; M[ss.str()] = i; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">queue</span>&lt;<span class="built_in">string</span>&gt; Q;</span><br><span class="line">  <span class="built_in">string</span> input;</span><br><span class="line">  <span class="keyword">while</span>(getline(<span class="built_in">cin</span>, input)) Q.push(input);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(!Q.empty())&#123;</span><br><span class="line">    <span class="built_in">string</span> str = Q.front(); Q.pop();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v = split(str, <span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">if</span>(v.size() == <span class="number">3</span> &amp;&amp; M.find(v[<span class="number">0</span>]) != M.end())&#123;</span><br><span class="line">      M[v[<span class="number">2</span>]] = M[v[<span class="number">0</span>]];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(v.size() == <span class="number">4</span> &amp;&amp; M.find(v[<span class="number">1</span>]) != M.end())&#123;</span><br><span class="line">      M[v[<span class="number">3</span>]] = ~M[v[<span class="number">1</span>]];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(v.size() == <span class="number">5</span> &amp;&amp; v[<span class="number">1</span>] == <span class="string">"AND"</span> &amp;&amp; M.find(v[<span class="number">0</span>]) != M.end() &amp;&amp; M.find(v[<span class="number">2</span>]) != M.end())&#123;</span><br><span class="line">      M[v[<span class="number">4</span>]] = M[v[<span class="number">0</span>]] &amp; M[v[<span class="number">2</span>]];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(v.size() == <span class="number">5</span> &amp;&amp; v[<span class="number">1</span>] == <span class="string">"OR"</span> &amp;&amp; M.find(v[<span class="number">0</span>]) != M.end() &amp;&amp; M.find(v[<span class="number">2</span>]) != M.end())&#123;</span><br><span class="line">      M[v[<span class="number">4</span>]] = M[v[<span class="number">0</span>]] | M[v[<span class="number">2</span>]];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(v.size() == <span class="number">5</span> &amp;&amp; v[<span class="number">1</span>] == <span class="string">"LSHIFT"</span> &amp;&amp; M.find(v[<span class="number">0</span>]) != M.end() &amp;&amp; M.find(v[<span class="number">2</span>]) != M.end())&#123;</span><br><span class="line">      M[v[<span class="number">4</span>]] = M[v[<span class="number">0</span>]] &lt;&lt; M[v[<span class="number">2</span>]];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(v.size() == <span class="number">5</span> &amp;&amp; v[<span class="number">1</span>] == <span class="string">"RSHIFT"</span> &amp;&amp; M.find(v[<span class="number">0</span>]) != M.end() &amp;&amp; M.find(v[<span class="number">2</span>]) != M.end())&#123;</span><br><span class="line">      M[v[<span class="number">4</span>]] = M[v[<span class="number">0</span>]] &gt;&gt; M[v[<span class="number">2</span>]];</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">      Q.push(str);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt;M[<span class="string">"a"</span>] &lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Day_8">Day 8</h3><p>エスケープ文字を頑張ってスキップする．<br>両側の”もカウントしない．</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countChars</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="keyword">int</span>)s.length() - <span class="number">1</span>; ++i, ++res)&#123;</span><br><span class="line">    <span class="keyword">if</span>(s[i] == <span class="string">'\\'</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(s[i + <span class="number">1</span>] == <span class="string">'x'</span>) i += <span class="number">3</span>;</span><br><span class="line">      <span class="keyword">else</span> i += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">string</span> s;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt;s)&#123;</span><br><span class="line">    a += (<span class="keyword">int</span>)s.length();</span><br><span class="line">    b += countChars(s);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt;a - b &lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Day_9">Day 9</h3><p>入力の形式が分かりづらいので，人名を数字になおして距離行列にする．<br>人は8種類しか存在しないので，何も考えない深さ優先探索で十分間に合う．</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; v;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; prepare()&#123;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ss; <span class="built_in">string</span> s;</span><br><span class="line">  <span class="keyword">while</span>(getline(<span class="built_in">cin</span>, s)) ss.push_back(s);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">char</span> a[<span class="number">100</span>], b[<span class="number">100</span>]; <span class="keyword">int</span> d;</span><br><span class="line">  <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; S;</span><br><span class="line">  REP(i, ss.size())&#123;</span><br><span class="line">    <span class="built_in">sscanf</span>(ss[i].c_str(), <span class="string">"%s to %s = %d\n"</span>, a, b, &amp;d);</span><br><span class="line">    S.insert(a); S.insert(b);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; M; <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="built_in">string</span> str : S) M[str] = num++;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; res(S.size(), <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(S.size(), INF));</span><br><span class="line">  REP(i, res.size()) res[i][i] = <span class="number">0</span>;</span><br><span class="line">  REP(i, ss.size())&#123;</span><br><span class="line">    <span class="built_in">sscanf</span>(ss[i].c_str(), <span class="string">"%s to %s = %d\n"</span>, a, b, &amp;d);</span><br><span class="line">    res[M[a]][M[b]] = d;</span><br><span class="line">    res[M[b]][M[a]] = d;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> cost, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; &amp;visited)</span></span>&#123;</span><br><span class="line">  visited[now] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> res = INF;</span><br><span class="line">  REP(i, N) <span class="keyword">if</span>(!visited[i]) res = min(res, solve(i, cost + v[now][i], visited));</span><br><span class="line">  visited[now] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> res == INF ? cost : res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  v = prepare();</span><br><span class="line">  N = v.size();</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; visited(N, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">int</span> ans = INF;</span><br><span class="line">  REP(i, N) ans = min(ans, solve(i, <span class="number">0</span>, visited));</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt;ans &lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Day_10">Day 10</h3><p>1つ前の数字を見て，一致しているかどうかによって処理を変える．</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">solve</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line">  <span class="built_in">stringstream</span> ss;</span><br><span class="line">  <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">  FOR(i, <span class="number">1</span>, s.length())&#123;</span><br><span class="line">    <span class="keyword">if</span>(s[i] != s[i - <span class="number">1</span>])&#123;</span><br><span class="line">      ss &lt;&lt; cnt &lt;&lt; s[i - <span class="number">1</span>];</span><br><span class="line">      cnt = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> ++cnt;</span><br><span class="line">  &#125;</span><br><span class="line">  ss &lt;&lt; cnt &lt;&lt; s[s.length() - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">return</span> ss.str();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> s = <span class="string">"1113222113"</span>;</span><br><span class="line">  REP(i, <span class="number">40</span>) s = solve(s);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt;s.length() &lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Day_11">Day 11</h3><p>C++では文字に1を足すと次の文字になるので，それを利用する．</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inc</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line">  s[s.size() - <span class="number">1</span>]++;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = s.size() - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i) <span class="keyword">if</span>(s[i] &gt; <span class="string">'z'</span>)&#123; s[i] = <span class="string">'a'</span>; s[i - <span class="number">1</span>]++; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line">  REP(i, s.size()) <span class="keyword">if</span>(s[i] == <span class="string">'i'</span> || s[i] == <span class="string">'o'</span> || s[i] == <span class="string">'l'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">  REP(i, (<span class="keyword">int</span>)s.size() - <span class="number">2</span>) <span class="keyword">if</span>(s[i] + <span class="number">1</span> == s[i + <span class="number">1</span>] &amp;&amp; s[i + <span class="number">1</span>] + <span class="number">1</span> == s[i + <span class="number">2</span>]) ++a;</span><br><span class="line">  REP(i, (<span class="keyword">int</span>)s.size() - <span class="number">1</span>) <span class="keyword">if</span>(s[i] == s[i + <span class="number">1</span>]) &#123; ++b; ++i; &#125; ;</span><br><span class="line">  <span class="keyword">return</span> a &gt; <span class="number">0</span> &amp;&amp; b &gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> s = <span class="string">"hepxcrrq"</span>;</span><br><span class="line">  <span class="keyword">while</span>(!check(s)) inc(s);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt;s &lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://adventofcode.com/" target="_blank" rel="external">http://adventofcode.com/</a></p>
<p>やります．<br>Part Twoは別記事で．</p>
<h3 id=]]>
    </summary>
    
      <category term="競プロ" scheme="http://yoursite.com/categories/%E7%AB%B6%E3%83%97%E3%83%AD/"/>
    
      <category term="その他" scheme="http://yoursite.com/categories/%E7%AB%B6%E3%83%97%E3%83%AD/%E3%81%9D%E3%81%AE%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[プロセス管理ツールの比較]]></title>
    <link href="http://yoursite.com/2015/12/10/%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E7%AE%A1%E7%90%86%E3%83%84%E3%83%BC%E3%83%AB%E3%81%AE%E6%AF%94%E8%BC%83/"/>
    <id>http://yoursite.com/2015/12/10/プロセス管理ツールの比較/</id>
    <published>2015-12-09T15:39:08.000Z</published>
    <updated>2015-12-09T15:46:05.000Z</updated>
    <content type="html"><![CDATA[<p>OJT中に<a href="https://twitter.com/hsbt" target="_blank" rel="external">hsbt</a>さんに口頭で説明して頂いた、<br>プロセス管理ツールについての説明をメモします。</p>
<p>解釈ミスにより私が間違って理解しているところがある可能性があるため<br>何か間違っている、もしくは足りない所があれば、指摘して頂けるととても嬉しいです。</p>
<h3 id="プロセス管理ツールとは">プロセス管理ツールとは</h3><p>通常、プログラムは1度走り切ると終了してしまいます。<br>(デーモン化もしていないのに終了しないプログラムは無限ループしていると言えます)</p>
<p>また、長い間走らせることを想定しているプログラムも<br>何かの異常が起きた場合に、望まぬ終了をしてしまう場合があります。</p>
<p>プロセス管理ツールは、主に上記のような問題を解決します。<br>つまり</p>
<ul>
<li>プログラムをデーモン化し、持続して実行させる</li>
<li>何かの異常でプログラムが落ちてしまった時に、必要であれば再起動させる</li>
</ul>
<p>という機能を持ちます。</p>
<p>その他、ログを取ったり、プログラムのステータスを確認することができたりします。</p>
<p>また、プロセス管理ツールによって管理されているプログラムをサービスと呼びます。</p>
<h3 id="daemon_tools,_monit,_supervisord">daemon tools, monit, supervisord</h3><p>標準でOSに付属していない、yum等で入れるプロセス管理ツールです。</p>
<p>標準でOSに付いてきたsysVinitはシェルスクリプトを書く必要がありましたが、<br>これらはその欠点を補うように、設定ファイルの記述のみでサービスを管理することができます。</p>
<p>ただし、CentOS7から標準で付属するsystemctlは<br>シェルスクリプトを書く必要が無い上に、インストールの手間もありません。</p>
<h3 id="sysVinit">sysVinit</h3><p>CentOS6以前に、OSに標準で付属していたプロセス管理ツールです。</p>
<p>サービスごとにランレベルというものを決めることができます。<br>ランレベルは以下の6種類が存在します。</p>
<ul>
<li>level 0<ul>
<li>シャットダウン状態</li>
</ul>
</li>
<li>level 1<ul>
<li>シングルユーザーモード (セーフモード)</li>
</ul>
</li>
<li>level 2<ul>
<li>ネットワーク機能の無いCUIマルチユーザモード</li>
</ul>
</li>
<li>level 3<ul>
<li>ネットワーク機能有りのCUIマルチユーザモード</li>
</ul>
</li>
<li>level 4<ul>
<li>カスタムモード</li>
</ul>
</li>
<li>level 5<ul>
<li>ネットワーク機能有りのGUIマルチユーザモード</li>
</ul>
</li>
<li>level 6<ul>
<li>再起動時の状態</li>
</ul>
</li>
</ul>
<p>ランレベルを決めるということは、そのレベルで起動している際に、そのサービスを起動させるかどうかをしていするということです。<br>つまり、</p>
<ul>
<li>ON<ul>
<li>level 2</li>
<li>level 3</li>
<li>level 4</li>
<li>level 5</li>
</ul>
</li>
<li>OFF<ul>
<li>level 0</li>
<li>level 1</li>
<li>level 6</li>
</ul>
</li>
</ul>
<p>としている場合は、通常起動時にはそのサービスを起動し<br>シャットダウン・再起動・セーフモードとして起動時は、そのサービスを起動しないという設定になります。</p>
<p>サービスを管理させる場合は、シェルスクリプトを書く必要があります。<br>このシェルスクリプトは、initスクリプトと呼ばれます。</p>
<p>例えば、 <code>/etc/init.d</code> に配置されるnginxは、以下の様なinitスクリプトになっています。</p>
<figure class="highlight sh"><figcaption><span>nginx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(略)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">    [ -x <span class="variable">$nginx</span> ] || <span class="built_in">exit</span> <span class="number">5</span></span><br><span class="line">    [ <span class="operator">-f</span> <span class="variable">$NGINX_CONF_FILE</span> ] || <span class="built_in">exit</span> <span class="number">6</span></span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">"Starting <span class="variable">$prog</span>: "</span></span><br><span class="line">    daemon <span class="variable">$nginx</span> -c <span class="variable">$NGINX_CONF_FILE</span></span><br><span class="line">    retval=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    [ <span class="variable">$retval</span> <span class="operator">-eq</span> <span class="number">0</span> ] &amp;&amp; touch <span class="variable">$lockfile</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$retval</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">"Stopping <span class="variable">$prog</span>: "</span></span><br><span class="line">    killproc <span class="variable">$prog</span></span><br><span class="line">    retval=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    [ <span class="variable">$retval</span> <span class="operator">-eq</span> <span class="number">0</span> ] &amp;&amp; rm <span class="operator">-f</span> <span class="variable">$lockfile</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$retval</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">restart</span></span>() &#123;</span><br><span class="line">    configtest_q || configtest || <span class="built_in">return</span> <span class="number">6</span></span><br><span class="line">    stop</span><br><span class="line">    start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reload</span></span>() &#123;</span><br><span class="line">    configtest_q || configtest || <span class="built_in">return</span> <span class="number">6</span></span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">"Reloading <span class="variable">$prog</span>: "</span></span><br><span class="line">    killproc <span class="variable">$nginx</span> -HUP</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">configtest</span></span>() &#123;</span><br><span class="line">  <span class="variable">$nginx</span> -t -c <span class="variable">$NGINX_CONF_FILE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">configtest_q</span></span>() &#123;</span><br><span class="line">    configtest &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">rh_status</span></span>() &#123;</span><br><span class="line">    status <span class="variable">$prog</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">rh_status_q</span></span>() &#123;</span><br><span class="line">    rh_status &gt;/dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Upgrade the binary with no downtime.</span></span><br><span class="line"><span class="function"><span class="title">upgrade</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> pidfile=<span class="string">"/var/run/<span class="variable">$&#123;prog&#125;</span>.pid"</span></span><br><span class="line">    <span class="built_in">local</span> oldbin_pidfile=<span class="string">"<span class="variable">$&#123;pidfile&#125;</span>.oldbin"</span></span><br><span class="line"></span><br><span class="line">    configtest_q || configtest || <span class="built_in">return</span> <span class="number">6</span></span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">"Staring new master <span class="variable">$prog</span>: "</span></span><br><span class="line">    killproc <span class="variable">$nginx</span> -USR2</span><br><span class="line">    retval=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    sleep <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="operator">-f</span> <span class="variable">$&#123;oldbin_pidfile&#125;</span> &amp;&amp; <span class="operator">-f</span> <span class="variable">$&#123;pidfile&#125;</span> ]];  <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -n $<span class="string">"Graceful shutdown of old <span class="variable">$prog</span>: "</span></span><br><span class="line">        killproc -p <span class="variable">$&#123;oldbin_pidfile&#125;</span> -QUIT</span><br><span class="line">        retval=$?</span><br><span class="line">        <span class="built_in">echo</span></span><br><span class="line">        <span class="built_in">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> $<span class="string">"Something bad happened, manual intervention required, maybe restart?"</span></span><br><span class="line">        <span class="built_in">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">        rh_status_q &amp;&amp; <span class="built_in">exit</span> <span class="number">0</span></span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> <span class="number">0</span></span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    restart|configtest)</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    force-reload|upgrade)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> <span class="number">7</span></span><br><span class="line">        upgrade</span><br><span class="line">        ;;</span><br><span class="line">    reload)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> <span class="number">7</span></span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    status|status_q)</span><br><span class="line">        rh_<span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    condrestart|try-restart)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> <span class="number">7</span></span><br><span class="line">        restart</span><br><span class="line">            ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> $<span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|reload|configtest|status|force-reload|upgrade|restart&#125;"</span></span><br><span class="line">        <span class="built_in">exit</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>
<p>これを見て分かる通り、 <code>service nginx start</code> や <code>/etc/init.d/nginx start</code> とすることは<br>このinitスクリプトの <code>start()</code> を実行しているということと同じ意味になります。</p>
<p>そのため、自作のサービスを登録する際は、このinitスクリプトを書く必要があります。</p>
<h3 id="systemd">systemd</h3><p>CentOS7以降に、OSに標準で付属するようになったプロセス管理ツールです。<br>sysVinitのようにinitスクリプトを書く必要がなく、設定ファイルのみの用意でサービスを管理することができます。</p>
<p>sysVinitでは、サービスをスクリプト単位で管理していましたが<br>systemdではUnitと呼ばれる単位で管理します。</p>
<p>systemdはsysVinitの機能に加え、様々な機能が備わっています。<br>以下、その機能の例です。</p>
<ul>
<li>サービス間の関係を定義することができる<ul>
<li>このサービスが起動する際はこのサービスも一緒に起動する、ということが指定可能</li>
<li>サービスの起動順序も定義可能</li>
</ul>
</li>
<li>複数のUnitを1つのUnitとしてまとめることができる<ul>
<li>target Unitと呼ばれる</li>
</ul>
</li>
</ul>
<p>sysVinitと互換性があり、systemdの <code>systemctl</code> コマンドを利用した際は、以下のように処理されます。</p>
<ol>
<li>systemd管理下のサービスの中に、指定されたサービスが存在するかを調べる</li>
<li>systemd管理下に存在していれば <code>systemctl</code> コマンドで指定された挙動を行う (終了)</li>
<li>systemd管理下に存在しなければ、sysVinit管理下のサービスの中に、指定されたサービスが存在するかを調べる</li>
<li>sysVinit管理下に存在していれば、 <code>systemctl</code> で指定されたコマンドを <code>chkconfig</code> 等のコマンドに置き換え、指定された挙動を行う (終了)</li>
<li>sysVinit管理下に存在しなければ、存在しないサービスであると判定する (終了)</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>OJT中に<a href="https://twitter.com/hsbt" target="_blank" rel="external">hsbt</a>さんに口頭で説明して頂いた、<br>プロセス管理ツールについての説明をメモします。</p>
<p>解釈ミスにより私が]]>
    </summary>
    
      <category term="systemd" scheme="http://yoursite.com/tags/systemd/"/>
    
      <category term="sysvinit" scheme="http://yoursite.com/tags/sysvinit/"/>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CODE THANKS FESTIVAL 2015]]></title>
    <link href="http://yoursite.com/2015/12/05/CODE-THANKS-FESTIVAL-2015/"/>
    <id>http://yoursite.com/2015/12/05/CODE-THANKS-FESTIVAL-2015/</id>
    <published>2015-12-05T05:49:06.000Z</published>
    <updated>2015-12-12T09:19:22.000Z</updated>
    <content type="html"><![CDATA[<p>オンサイト参加資格が無いので，オープンに出ました．</p>
<p><a href="http://code-thanks-festival-2015-open.contest.atcoder.jp/" target="_blank" rel="external">http://code-thanks-festival-2015-open.contest.atcoder.jp/</a></p>
<h3 id="A">A</h3><p>AからBに行くときの最短はabs(A - B)です．<br>この場合，100から-100に飛ぶなどということが出来ないので，この計算で大丈夫です．</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> A, B; <span class="built_in">cin</span> &gt;&gt;A &gt;&gt;B;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt;(<span class="built_in">abs</span>(A) + <span class="built_in">abs</span>(A - B) + <span class="built_in">abs</span>(B)) &lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="B">B</h3><p>全ての可能性を試します．<br>同じ数字を2回以上出力しないように注意して下さい．</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> L = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> A[L], B[L], C;</span><br><span class="line">  REP(i, L) <span class="built_in">cin</span> &gt;&gt;A[i];</span><br><span class="line">  REP(i, L) <span class="built_in">cin</span> &gt;&gt;B[i];</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt;C;</span><br><span class="line">  <span class="built_in">set</span>&lt;P&gt; S;</span><br><span class="line">  <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">  REP(i, L)&#123;</span><br><span class="line">    REP(j, L)&#123;</span><br><span class="line">      P p = P(min(A[i], B[j]), max(A[i], B[j]));</span><br><span class="line">      <span class="keyword">if</span>(S.find(p) != S.end()) <span class="keyword">continue</span>;</span><br><span class="line">      S.insert(p);</span><br><span class="line">      <span class="keyword">if</span>(p.first == C) ans.insert(p.second);</span><br><span class="line">      <span class="keyword">if</span>(p.second == C) ans.insert(p.first);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt;ans.size() &lt;&lt;endl;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> n : ans) <span class="built_in">cout</span> &lt;&lt;n &lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C">C</h3><p>生徒の数が少ないので，端から順に探していっても間に合います．</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;H, <span class="keyword">int</span> X)</span></span>&#123;</span><br><span class="line">  REP(i, H.size()) <span class="keyword">if</span>(H[i] &gt; X) <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> H.size() + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> N, X; <span class="built_in">cin</span> &gt;&gt;N;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; H(N);</span><br><span class="line">  REP(i, N) <span class="built_in">cin</span> &gt;&gt;H[i];</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt;X;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt;solve(H, X) &lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="D">D</h3><p>既に今までのa = 0のクエリで得点を把握していれば，それを出力します．<br>そうでなければ</p>
<ul>
<li>p : (合計点 - 今分かっている得点)</li>
<li>n : まだその人が得点を把握していない人の数</li>
</ul>
<p>を使って，以下のように計算します．</p>
<ul>
<li>x点以上</li>
</ul>
<p>max(0, p - ((n - 1) * 100))</p>
<p>得点の範囲を知りたい人c以外のn - 1人全てが100点だった場合の点を考えます．<br>0未満になってしまう場合はcが0点である可能性があるので，0とします．</p>
<ul>
<li>y点以下</li>
</ul>
<p>pが100以上なら100，そうでなければp</p>
<p>n人全てが0点だった場合の点を考えます．</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> N, sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; S;</span><br><span class="line"><span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; &gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> &amp;b, <span class="keyword">int</span> &amp;c)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> k = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">  REP(i, N) <span class="keyword">if</span>(v[b][i]) &#123; k += S[i]; ++cnt; &#125;</span><br><span class="line">  <span class="keyword">int</span> l = max(<span class="number">0</span>, sum - k - (N - cnt - <span class="number">1</span>) * <span class="number">100</span>), h = (sum - k &gt;= <span class="number">100</span> ? <span class="number">100</span> : sum - k);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt;l &lt;&lt;<span class="string">" "</span> &lt;&lt;h &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt;N;</span><br><span class="line">  S = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(N);</span><br><span class="line">  REP(i, N) &#123; <span class="built_in">cin</span> &gt;&gt;S[i]; sum += S[i]; &#125;</span><br><span class="line">  v = <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; &gt;(N, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(N, <span class="number">0</span>));</span><br><span class="line">  REP(i, N) v[i][i] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> M; <span class="built_in">cin</span> &gt;&gt;M;</span><br><span class="line">  <span class="keyword">int</span> a, b, c;</span><br><span class="line">  REP(i, M)&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;a &gt;&gt;b &gt;&gt;c;</span><br><span class="line">    --b; --c;</span><br><span class="line">    <span class="keyword">if</span>(a)&#123;</span><br><span class="line">      <span class="keyword">if</span>(v[b][c]) <span class="built_in">cout</span> &lt;&lt;S[c] &lt;&lt;<span class="string">" "</span> &lt;&lt;S[c] &lt;&lt;endl;</span><br><span class="line">      <span class="keyword">else</span> solve(b, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> v[b][c] = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="E">E</h3><p>Sの中の，Tに含まれていない文字を全て消します．<br>消した結果の文字列S’の部分文字列にTがあればYES，そうでなければNOです．</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ALPHA = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> &amp;b)</span></span>&#123;</span><br><span class="line">  REP(i, (<span class="keyword">int</span>)(a.length() - b.length()) + <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.substr(i, b.length()) == b) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="built_in">string</span> &amp;a, <span class="built_in">string</span> &amp;b)</span></span>&#123;</span><br><span class="line">  <span class="built_in">stringstream</span> ss;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; v(ALPHA, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">char</span> c : b) v[c - <span class="string">'a'</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">char</span> c : a) <span class="keyword">if</span>(v[c - <span class="string">'a'</span>]) ss &lt;&lt; c;</span><br><span class="line">  <span class="keyword">return</span> check(ss.str(), b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> Q; <span class="built_in">cin</span> &gt;&gt;Q;</span><br><span class="line">  <span class="built_in">string</span> S, T;</span><br><span class="line">  REP(q, Q)&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;S &gt;&gt;T;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;(solve(S, T) ? <span class="string">"YES"</span> : <span class="string">"NO"</span>) &lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>以下，本番中に解けず，解説を見て復習した問題です．</p>
<h3 id="F">F</h3><p>両者が最善を尽くした場合，1の実がとられないように，可能な限り1に隣接していない実を食べるはずなので，最終的には1と，1に隣接した実のみが残ります．<br>この後，どちらが1の実を食べられるかどうかは，最初の実の数Nが偶数であるか奇数であるかで決定します．</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> N, cnt = <span class="number">0</span>; <span class="built_in">cin</span> &gt;&gt;N;</span><br><span class="line">  REP(i, N - <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b; <span class="built_in">cin</span> &gt;&gt;a &gt;&gt;b;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="number">1</span> || b == <span class="number">1</span>) ++cnt;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(cnt == <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt;<span class="string">"A"</span> &lt;&lt;endl;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(N % <span class="number">2</span>) <span class="built_in">cout</span> &lt;&lt;<span class="string">"B"</span> &lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt;<span class="string">"A"</span> &lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="G">G</h3><p>色の種類が</p>
<blockquote>
<p>ci(1≦ci≦1,000,000,000)</p>
</blockquote>
<p>と書いていて一瞬怯みますが，道の本数が</p>
<blockquote>
<p>M(1≦M≦80,000)</p>
</blockquote>
<p>なので，色の種類は多くても80,000種類にしかならないことが分かります．</p>
<p>そのため，closedを <code>map&lt;P, Int&gt;</code> とでもmapで管理します．</p>
<p>余談ですが，私は本番で <code>map&lt;P, Int&gt;</code> ではなく<code>number_to_color</code> , <code>color_to_number</code><br>という対応表みたいなmapを作ってダイクストラを書きましたが<br>これだとMLEで落ちてしまいました．</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> Int;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;Int, Int&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;P, Int&gt; PP;</span><br><span class="line"><span class="keyword">const</span> Int INF = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line">Int N, M;</span><br><span class="line"><span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;PP&gt; &gt; v;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> C&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    Int now, cost, color;</span><br><span class="line">    C(Int nn, Int tt, Int cc)&#123; now = nn; cost = tt; color = cc; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> C &amp;c) <span class="keyword">const</span> &#123; <span class="keyword">return</span> cost &gt; c.cost; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Int <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">  priority_queue&lt;C, <span class="built_in">vector</span>&lt;C&gt;, greater&lt;C&gt; &gt; open;</span><br><span class="line">  open.push(C(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">  <span class="built_in">map</span>&lt;P, Int&gt; closed;</span><br><span class="line">  <span class="keyword">while</span>(!open.empty())&#123;</span><br><span class="line">    C c = open.top(); open.pop();</span><br><span class="line">    <span class="keyword">if</span>(c.cost &gt; closed[P(c.now, c.color)]) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span>(c.now == N - <span class="number">1</span>) <span class="keyword">return</span> c.cost;</span><br><span class="line">    REP(i, v[c.now].size())&#123;</span><br><span class="line">      Int to = v[c.now][i].first.first, color = v[c.now][i].first.second;</span><br><span class="line">      Int cost = v[c.now][i].second;</span><br><span class="line">      Int nextcost = c.cost + <span class="built_in">abs</span>(c.color - color) + cost;</span><br><span class="line">      <span class="keyword">if</span>(closed.find(P(to, color)) == closed.end() || nextcost &lt; closed[P(to, color)])&#123;</span><br><span class="line">        closed[P(to, color)] = nextcost;</span><br><span class="line">        open.push(C(to, nextcost, color));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> INF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt;N &gt;&gt;M;</span><br><span class="line">  v = <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;PP&gt; &gt;(N);</span><br><span class="line">  REP(i, M)&#123;</span><br><span class="line">    Int a, b, c, t; <span class="built_in">cin</span> &gt;&gt;a &gt;&gt;b &gt;&gt;c &gt;&gt;t;</span><br><span class="line">    --a; --b;</span><br><span class="line">    v[a].push_back(PP(P(b, c), t));</span><br><span class="line">    v[b].push_back(PP(P(a, c), t));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt;solve() &lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="H">H</h3><p><a href="http://kmjp.hatenablog.jp/entry/2015/12/05/1100" target="_blank" rel="external">http://kmjp.hatenablog.jp/entry/2015/12/05/1100</a></p>
<p>ここが大変参考になります．<br>(しゃくとり法ができなさすぎて，ほぼ参考元そのまま)</p>
<p>累積和は自作ライブラリから．</p>
<p>long long intを使わないとWAになることに注意．</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">typedef long long int Int;</span><br><span class="line">typedef pair<span class="xml"><span class="tag">&lt;<span class="title">Int,</span> <span class="attribute">Int</span>&gt;</span></span> P;</span><br><span class="line">typedef pair<span class="xml"><span class="tag">&lt;<span class="title">P,</span> <span class="attribute">P</span>&gt;</span></span> PP;</span><br><span class="line"><span class="header">#define Y first</span></span><br><span class="line"><span class="header">#define X second</span></span><br><span class="line">const Int MAX_H = 400;</span><br><span class="line">const Int MAX_W = 400;</span><br><span class="line">const Int N = 10;</span><br><span class="line"></span><br><span class="line">Int H, W, K, ans, v[<span class="link_label">N</span>][<span class="link_reference">MAX_H</span>][<span class="link_label">MAX_W</span>], input[<span class="link_label">MAX_H</span>][<span class="link_reference">MAX_W</span>];</span><br><span class="line"></span><br><span class="line">void init(Int input[<span class="link_label">MAX_H</span>][<span class="link_reference">MAX_W</span>])&#123;</span><br><span class="line">  memcpy(v[0], input, sizeof(v[0]));</span><br><span class="line">  FOR(num, 1, N) REP(i, H) REP(j, W) v[<span class="link_label">num</span>][<span class="link_reference">i</span>][<span class="link_label">j</span>] = input[<span class="link_label">i</span>][<span class="link_reference">j</span>] == num;</span><br><span class="line">  REP(num, N)&#123;</span><br><span class="line"><span class="code">    FOR(i, 1, H) v[num][i][0] += v[num][i - 1][0];</span></span><br><span class="line"><span class="code">    FOR(i, 1, W) v[num][0][i] += v[num][0][i - 1];</span></span><br><span class="line"><span class="code">    FOR(y, 1, H) FOR(x, 1, W) v[num][y][x] += v[num][y - 1][x] + v[num][y][x - 1] - v[num][y - 1][x - 1];</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Int calc(Int num, P a, P b)&#123;</span><br><span class="line">  Int ret = v[<span class="link_label">num</span>][<span class="link_reference">b.Y</span>][<span class="link_label">b.X</span>];</span><br><span class="line">  if(a.X - 1 &gt;= 0) ret -= v[<span class="link_label">num</span>][<span class="link_reference">b.Y</span>][<span class="link_label">a.X - 1</span>];</span><br><span class="line">  if(a.Y - 1 &gt;= 0) ret -= v[<span class="link_label">num</span>][<span class="link_reference">a.Y - 1</span>][<span class="link_label">b.X</span>];</span><br><span class="line">  if(a.X - 1 &gt;= 0 &amp;&amp; a.Y - 1 &gt;= 0) ret += v[<span class="link_label">num</span>][<span class="link_reference">a.Y - 1</span>][<span class="link_label">a.X - 1</span>];</span><br><span class="line">  return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Int solve()&#123;</span><br><span class="line">  Int res = 0;</span><br><span class="line">  REP(y1, H - 2)&#123;</span><br><span class="line"><span class="code">    REP(x1, W - 2)&#123;</span></span><br><span class="line"><span class="code">      Int n = y1 + 2;</span></span><br><span class="line"><span class="code">      for(Int x2 = W - 1; x2 &gt;= x1 + 2; --x2)&#123;</span></span><br><span class="line"><span class="code">        while(n &lt; H &amp;&amp; calc(0, P(y1, x1), P(n, x2)) &lt;= K) ++n;</span></span><br><span class="line"><span class="code">        FOR(y2, n, H)&#123;</span></span><br><span class="line"><span class="code">          Int num = calc(0, P(y1, x1), P(y2, x2));</span></span><br><span class="line"><span class="code">          if(num - K &gt; 9) break;</span></span><br><span class="line"><span class="code">          res += calc(num - K, P(y1 + 1, x1 + 1), P(y2 - 1, x2 - 1));</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">      &#125;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">  cin &gt;&gt;H &gt;&gt;W &gt;&gt;K;</span><br><span class="line">  REP(i, H)&#123;</span><br><span class="line"><span class="code">    REP(j, W)&#123;</span></span><br><span class="line"><span class="code">      char c; cin &gt;&gt;c;</span></span><br><span class="line"><span class="code">      input[i][j] = c - '0';</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  init(input);</span><br><span class="line">  cout <span class="xml"><span class="tag">&lt;&lt;<span class="attribute">solve</span>() &lt;&lt;<span class="attribute">endl</span>;</span><br><span class="line">  <span class="attribute">return</span> <span class="attribute">0</span>;</span><br><span class="line">&#125;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>オンサイト参加資格が無いので，オープンに出ました．</p>
<p><a href="http://code-thanks-festival-2015-open.contest.atcoder.jp/" target="_blank" rel="external">http:]]>
    </summary>
    
      <category term="競プロ" scheme="http://yoursite.com/categories/%E7%AB%B6%E3%83%97%E3%83%AD/"/>
    
      <category term="CodeFestival" scheme="http://yoursite.com/categories/%E7%AB%B6%E3%83%97%E3%83%AD/CodeFestival/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[競プロ用C++ライブラリ-幾何]]></title>
    <link href="http://yoursite.com/2015/12/05/%E7%AB%B6%E3%83%97%E3%83%AD%E7%94%A8C-%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA-%E5%B9%BE%E4%BD%95/"/>
    <id>http://yoursite.com/2015/12/05/競プロ用C-ライブラリ-幾何/</id>
    <published>2015-12-05T05:01:24.000Z</published>
    <updated>2015-12-05T06:01:57.000Z</updated>
    <content type="html"><![CDATA[<p>ほとんど<a href="http://www.prefield.com/algorithm/" target="_blank" rel="external">Spaghetti Source</a>のコピペです．</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> double EPS = 1e-8;</span><br><span class="line"><span class="keyword">const</span> double <span class="keyword">INF</span> = 1e12;</span><br><span class="line">#define X <span class="literal">real</span>()</span><br><span class="line">#define Y imag()</span><br><span class="line">#define curr(P, i) P[i]</span><br><span class="line">#define next(P, i) P[(i+1)%P.size()]</span><br><span class="line">#define prev(P, i) P[(i+P.size()-1) % P.size()]</span><br><span class="line">#define diff(P, i) (next(P, i) - curr(P, i))</span><br><span class="line">#define <span class="keyword">EQ</span>(a,b) (<span class="literal">abs</span>((a)-(b)) &lt; EPS)</span><br><span class="line">namespace std &#123;</span><br><span class="line">  bool operator &lt; (<span class="keyword">const</span> P&amp; a, <span class="keyword">const</span> P&amp; b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">real</span>(a) != <span class="literal">real</span>(b) ? <span class="literal">real</span>(a) &lt; <span class="literal">real</span>(b) : imag(a) &lt; imag(b);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//overflow注意</span></span><br><span class="line">int distance2(P &amp;a, P &amp;b)&#123; <span class="keyword">return</span> (a.<span class="literal">real</span>() - b.<span class="literal">real</span>()) * (a.<span class="literal">real</span>() - b.<span class="literal">real</span>()) * (a.imag() - b.imag()) * (a.imag() - b.imag()); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外積</span></span><br><span class="line">double <span class="keyword">cross</span>(<span class="keyword">const</span> P&amp; a, <span class="keyword">const</span> P&amp; b) &#123; <span class="keyword">return</span> imag(conj(a)*b); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内積</span></span><br><span class="line">double dot(<span class="keyword">const</span> P&amp; a, <span class="keyword">const</span> P&amp; b) &#123; <span class="keyword">return</span> <span class="literal">real</span>(conj(a)*b); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//線 (線分)</span></span><br><span class="line">struct <span class="keyword">L</span> : public vector&lt;P&gt; &#123;</span><br><span class="line">  <span class="keyword">L</span>(<span class="keyword">const</span> P &amp;a, <span class="keyword">const</span> P &amp;b) &#123;</span><br><span class="line">    push_back(a); push_back(b);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int ccw(P a, P b, P c) &#123;</span><br><span class="line">  b -= a; c -= a;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">cross</span>(b, c) &gt; 0)   <span class="keyword">return</span> +1;       <span class="comment">// counter clockwise</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">cross</span>(b, c) &lt; 0)   <span class="keyword">return</span> -1;       <span class="comment">// clockwise</span></span><br><span class="line">  <span class="keyword">if</span> (dot(b, c) &lt; 0)     <span class="keyword">return</span> +2;       <span class="comment">// c--a--b on line</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">norm</span>(b) &lt; <span class="literal">norm</span>(c)) <span class="keyword">return</span> -2;       <span class="comment">// a--b--c on line</span></span><br><span class="line">  <span class="keyword">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多角形</span></span><br><span class="line">typedef vector&lt;P&gt; <span class="keyword">G</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//円</span></span><br><span class="line">struct C &#123;</span><br><span class="line">  P p; double r;</span><br><span class="line">  C(<span class="keyword">const</span> P &amp;p, double r) : p(p), <span class="literal">r</span>(r) &#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//交差判定達 (L = 直線, P = 点, S = 線分)</span></span><br><span class="line"></span><br><span class="line">bool intersectLL(<span class="keyword">const</span> <span class="keyword">L</span> &amp;<span class="keyword">l</span>, <span class="keyword">const</span> <span class="keyword">L</span> &amp;<span class="keyword">m</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">abs</span>(<span class="keyword">cross</span>(<span class="keyword">l</span>[1]-<span class="keyword">l</span>[0], <span class="keyword">m</span>[1]-<span class="keyword">m</span>[0])) &gt; EPS || <span class="comment">// non-parallel</span></span><br><span class="line">    <span class="literal">abs</span>(<span class="keyword">cross</span>(<span class="keyword">l</span>[1]-<span class="keyword">l</span>[0], <span class="keyword">m</span>[0]-<span class="keyword">l</span>[0])) &lt; EPS;   <span class="comment">// same line</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool intersectLS(<span class="keyword">const</span> <span class="keyword">L</span> &amp;<span class="keyword">l</span>, <span class="keyword">const</span> <span class="keyword">L</span> &amp;s) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">cross</span>(<span class="keyword">l</span>[1]-<span class="keyword">l</span>[0], s[0]-<span class="keyword">l</span>[0])*       <span class="comment">// s[0] is left of l</span></span><br><span class="line">    <span class="keyword">cross</span>(<span class="keyword">l</span>[1]-<span class="keyword">l</span>[0], s[1]-<span class="keyword">l</span>[0]) &lt; EPS; <span class="comment">// s[1] is right of l</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool intersectLP(<span class="keyword">const</span> <span class="keyword">L</span> &amp;<span class="keyword">l</span>, <span class="keyword">const</span> P &amp;p) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">abs</span>(<span class="keyword">cross</span>(<span class="keyword">l</span>[1]-p, <span class="keyword">l</span>[0]-p)) &lt; EPS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool intersectSS(<span class="keyword">const</span> <span class="keyword">L</span> &amp;s, <span class="keyword">const</span> <span class="keyword">L</span> &amp;t) &#123;</span><br><span class="line">  <span class="keyword">return</span> ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) &lt;= 0 &amp;&amp;</span><br><span class="line">    ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) &lt;= 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool intersectSP(<span class="keyword">const</span> <span class="keyword">L</span> &amp;s, <span class="keyword">const</span> P &amp;p) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">abs</span>(s[0]-p)+<span class="literal">abs</span>(s[1]-p)-<span class="literal">abs</span>(s[1]-s[0]) &lt; EPS; <span class="comment">// triangle inequality</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-1 交差しない</span></span><br><span class="line"><span class="comment">//0 接する</span></span><br><span class="line"><span class="comment">//1 一箇所で交差する</span></span><br><span class="line"><span class="comment">//2 二箇所で交差する</span></span><br><span class="line">int intersectSC(<span class="keyword">const</span> <span class="keyword">L</span> &amp;s, <span class="keyword">const</span> C &amp;c) &#123;</span><br><span class="line">  int <span class="keyword">ins</span> = 0;</span><br><span class="line">  <span class="keyword">for</span>(int i = 0; i &lt; 2; i++ ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">abs</span>(s[i]-c.p)&lt;c.r) <span class="keyword">ins</span>++;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">EQ</span>(<span class="literal">abs</span>(s[i]-c.p), c.r)) <span class="keyword">return</span> 0;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">ins</span> == 2) <span class="keyword">return</span> -1;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">ins</span> == 1) <span class="keyword">return</span> 1;</span><br><span class="line">  double <span class="keyword">d</span> = distanceLP(s, c.p);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">d</span>-c.r &gt; EPS) <span class="keyword">return</span> -1;</span><br><span class="line">  P nor=(s[0]-s[1]) * P(0, 1);</span><br><span class="line">  <span class="keyword">if</span> (ccw(c.p, c.p+nor, s[0]) * ccw(c.p, c.p+nor, s[1]) &lt; 0) <span class="keyword">return</span> 2;</span><br><span class="line">  <span class="keyword">return</span> -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//線分lに対する、点pの射影</span></span><br><span class="line"><span class="comment">//射影とは、pからlに垂線を引いた時の交点</span></span><br><span class="line">P projection(<span class="keyword">const</span> <span class="keyword">L</span> &amp;<span class="keyword">l</span>, <span class="keyword">const</span> P &amp;p) &#123;</span><br><span class="line">  double t = dot(p-<span class="keyword">l</span>[0], <span class="keyword">l</span>[0]-<span class="keyword">l</span>[1]) / <span class="literal">norm</span>(<span class="keyword">l</span>[0]-<span class="keyword">l</span>[1]);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">l</span>[0] + t*(<span class="keyword">l</span>[0]-<span class="keyword">l</span>[1]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//線分lに対する、点pの反射</span></span><br><span class="line"><span class="comment">//反射とは、lを対称軸とした時にpと線対称の位置にある点</span></span><br><span class="line">P reflection(<span class="keyword">const</span> <span class="keyword">L</span> &amp;<span class="keyword">l</span>, <span class="keyword">const</span> P &amp;p) &#123;</span><br><span class="line">  <span class="keyword">return</span> p + P(2, 0) * (projection(<span class="keyword">l</span>, p) - p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//距離達 (L = 直線, P = 点, S = 線分)</span></span><br><span class="line"></span><br><span class="line">double distancePP(<span class="keyword">const</span> P &amp;a, <span class="keyword">const</span> P &amp;b)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">abs</span>(a - b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">double distanceLP(<span class="keyword">const</span> <span class="keyword">L</span> &amp;<span class="keyword">l</span>, <span class="keyword">const</span> P &amp;p) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">abs</span>(p - projection(<span class="keyword">l</span>, p));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">double distanceLL(<span class="keyword">const</span> <span class="keyword">L</span> &amp;<span class="keyword">l</span>, <span class="keyword">const</span> <span class="keyword">L</span> &amp;<span class="keyword">m</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> intersectLL(<span class="keyword">l</span>, <span class="keyword">m</span>) ? 0 : distanceLP(<span class="keyword">l</span>, <span class="keyword">m</span>[0]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">double distanceLS(<span class="keyword">const</span> <span class="keyword">L</span> &amp;<span class="keyword">l</span>, <span class="keyword">const</span> <span class="keyword">L</span> &amp;s) &#123;</span><br><span class="line">  <span class="keyword">if</span> (intersectLS(<span class="keyword">l</span>, s)) <span class="keyword">return</span> 0;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">min</span>(distanceLP(<span class="keyword">l</span>, s[0]), distanceLP(<span class="keyword">l</span>, s[1]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">double distanceSP(<span class="keyword">const</span> <span class="keyword">L</span> &amp;s, <span class="keyword">const</span> P &amp;p) &#123;</span><br><span class="line">  <span class="keyword">const</span> P r = projection(s, p);</span><br><span class="line">  <span class="keyword">if</span> (intersectSP(s, r)) <span class="keyword">return</span> <span class="literal">abs</span>(r - p);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">min</span>(<span class="literal">abs</span>(s[0] - p), <span class="literal">abs</span>(s[1] - p));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">double distanceSS(<span class="keyword">const</span> <span class="keyword">L</span> &amp;s, <span class="keyword">const</span> <span class="keyword">L</span> &amp;t) &#123;</span><br><span class="line">  <span class="keyword">if</span> (intersectSS(s, t)) <span class="keyword">return</span> 0;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">min</span>(<span class="literal">min</span>(distanceSP(s, t[0]), distanceSP(s, t[1])),</span><br><span class="line">      <span class="literal">min</span>(distanceSP(t, s[0]), distanceSP(t, s[1])));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//交点達</span></span><br><span class="line">P crosspointLL(<span class="keyword">const</span> <span class="keyword">L</span> &amp;<span class="keyword">l</span>, <span class="keyword">const</span> <span class="keyword">L</span> &amp;<span class="keyword">m</span>) &#123;</span><br><span class="line">  double A = <span class="keyword">cross</span>(<span class="keyword">l</span>[1] - <span class="keyword">l</span>[0], <span class="keyword">m</span>[1] - <span class="keyword">m</span>[0]);</span><br><span class="line">  double B = <span class="keyword">cross</span>(<span class="keyword">l</span>[1] - <span class="keyword">l</span>[0], <span class="keyword">l</span>[1] - <span class="keyword">m</span>[0]);</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">abs</span>(A) &lt; EPS &amp;&amp; <span class="literal">abs</span>(B) &lt; EPS) <span class="keyword">return</span> <span class="keyword">m</span>[0]; <span class="comment">// same line</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">abs</span>(A) &lt; EPS) <span class="keyword">assert</span>(false); <span class="comment">// !!!PRECONDITION NOT SATISFIED!!!</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">m</span>[0] + B / A * (<span class="keyword">m</span>[1] - <span class="keyword">m</span>[0]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;P&gt; crosspointCL(<span class="keyword">const</span> C &amp;c, <span class="keyword">const</span> <span class="keyword">L</span> &amp;<span class="keyword">l</span>)&#123;</span><br><span class="line">  vector&lt;P&gt; res;</span><br><span class="line">  double <span class="keyword">d</span> = distanceLP(<span class="keyword">l</span>, c.p);</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">d</span> &lt; c.r + EPS)&#123;</span><br><span class="line">    double len = (<span class="keyword">d</span> &gt; c.r) ? 0.0 : <span class="literal">sqrt</span>(c.r * c.r - <span class="keyword">d</span> * <span class="keyword">d</span>);</span><br><span class="line">    P nor = (<span class="keyword">l</span>[0] - <span class="keyword">l</span>[1]) / <span class="literal">abs</span>(<span class="keyword">l</span>[0] - <span class="keyword">l</span>[1]);</span><br><span class="line">    res.push_back(projection(<span class="keyword">l</span>, c.p) + len * nor);</span><br><span class="line">    res.push_back(projection(<span class="keyword">l</span>, c.p) - len * nor);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;P&gt; crosspointCS(<span class="keyword">const</span> C &amp;c, <span class="keyword">const</span> <span class="keyword">L</span> &amp;s)&#123;</span><br><span class="line">  vector&lt;P&gt; v = crosspointCL(c, <span class="keyword">l</span>), res;</span><br><span class="line">  REP(k, v.size()) <span class="keyword">if</span>(ccw(<span class="keyword">l</span>[0], v[k], <span class="keyword">l</span>[1]) == -2) res.push_back(v[k]);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;P&gt; crosspointCC(<span class="keyword">const</span> C &amp;c1, <span class="keyword">const</span> C &amp;c2)&#123;</span><br><span class="line">  vector&lt;P&gt; res;</span><br><span class="line">  double <span class="keyword">d</span> = <span class="literal">abs</span>(c1.p - c2.p);</span><br><span class="line">  double rc = (<span class="keyword">d</span> * <span class="keyword">d</span> + c1.r * c1.r - c2.r * c2.r) / (2 * <span class="keyword">d</span>);</span><br><span class="line">  double dfr = c1.r * c1.r - rc * rc;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">EQ</span>(dfr, 0.0)) dfr = 0.0;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(dfr &lt; 0.0) <span class="keyword">return</span> res;</span><br><span class="line">  double rs = <span class="literal">sqrt</span>(dfr);</span><br><span class="line"></span><br><span class="line">  P diff = (c2.p - c1.p) / <span class="keyword">d</span>;</span><br><span class="line">  res.push_back(c1.p + diff * P(rc, rs));</span><br><span class="line">  res.push_back(c1.p + diff * P(rc, -rs));</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直交かどうか</span></span><br><span class="line">bool orthogonalLL(<span class="keyword">const</span> <span class="keyword">L</span> &amp;l1, <span class="keyword">const</span> <span class="keyword">L</span> &amp;l2)&#123;</span><br><span class="line">  <span class="keyword">return</span> (dot(l1[0]-l1[1], l2[0]-l2[1]) &lt;= EPS &amp;&amp; dot(l1[0]-l1[1], l2[0]-l2[1]) &gt;= -EPS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//平行かどうか</span></span><br><span class="line">bool parallel(<span class="keyword">const</span> <span class="keyword">L</span> &amp;l1, <span class="keyword">const</span> <span class="keyword">L</span> &amp;l2)&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">cross</span>(l1[0]-l1[1], l2[0]-l2[1]) &lt;= EPS &amp;&amp; <span class="keyword">cross</span>(l1[0]-l1[1], l2[0]-l2[1]) &gt;= -EPS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多角形の面積</span></span><br><span class="line">double area2(<span class="keyword">const</span> <span class="keyword">G</span> &amp;P) &#123;</span><br><span class="line">  double A = 0.0;</span><br><span class="line">  <span class="keyword">for</span> (int i = 0; i &lt; P.size(); ++i)</span><br><span class="line">    A += <span class="keyword">cross</span>(curr(P, i), next(P, i));</span><br><span class="line">  <span class="keyword">return</span> A / 2.0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//凸性判定</span></span><br><span class="line"><span class="comment">//ただし、凸性の定義(全ての角が180度未満)より、0度の角があるようなものも凸とする。</span></span><br><span class="line"><span class="comment">//convex_hullして点の数を比較したほうが安全な気がする</span></span><br><span class="line">bool isconvex(<span class="keyword">const</span> <span class="keyword">G</span> &amp;P) &#123;</span><br><span class="line">  <span class="keyword">for</span> (int i = 0; i &lt; P.size(); ++i)</span><br><span class="line">    <span class="keyword">if</span> (ccw(prev(P, i), curr(P, i), next(P, i)) == 1) <span class="keyword">return</span> false;</span><br><span class="line">  <span class="keyword">return</span> true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//点-多角形包含判定</span></span><br><span class="line">enum &#123; <span class="keyword">OUT</span>, <span class="keyword">ON</span>, <span class="keyword">IN</span> &#125;;</span><br><span class="line">int contains(<span class="keyword">const</span> <span class="keyword">G</span> &amp;<span class="keyword">g</span>, <span class="keyword">const</span> P &amp;p) &#123;</span><br><span class="line">  bool <span class="keyword">in</span> = false;</span><br><span class="line">  <span class="keyword">for</span> (int i = 0; i &lt; <span class="keyword">g</span>.size(); ++i) &#123;</span><br><span class="line">    P a = curr(<span class="keyword">g</span>,i) - p, b = next(<span class="keyword">g</span>,i) - p;</span><br><span class="line">    <span class="keyword">if</span> (imag(a) &gt; imag(b)) swap(a, b);</span><br><span class="line">    <span class="keyword">if</span> (imag(a) &lt;= 0 &amp;&amp; 0 &lt; imag(b))</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">cross</span>(a, b) &lt; 0) <span class="keyword">in</span> = !<span class="keyword">in</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">cross</span>(a, b) == 0 &amp;&amp; dot(a, b) &lt;= 0) <span class="keyword">return</span> <span class="keyword">ON</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">in</span> ? <span class="keyword">IN</span> : <span class="keyword">OUT</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//凸包</span></span><br><span class="line"><span class="keyword">G</span> convex_hull(<span class="keyword">G</span> &amp;ps) &#123;</span><br><span class="line">  int <span class="keyword">n</span> = ps.size(), k = 0;</span><br><span class="line">  <span class="keyword">sort</span>(ps.begin(), ps.end());</span><br><span class="line">  <span class="keyword">G</span> ch(2*<span class="keyword">n</span>);</span><br><span class="line">  <span class="keyword">for</span> (int i = 0; i &lt; <span class="keyword">n</span>; ch[k++] = ps[i++]) <span class="comment">// lower-hull</span></span><br><span class="line">    <span class="keyword">while</span> (k &gt;= 2 &amp;&amp; ccw(ch[k-2], ch[k-1], ps[i]) == -1) --k;</span><br><span class="line">  <span class="keyword">for</span> (int i = <span class="keyword">n</span>-2, t = k+1; i &gt;= 0; ch[k++] = ps[i--]) <span class="comment">// upper-hull</span></span><br><span class="line">    <span class="keyword">while</span> (k &gt;= t &amp;&amp; ccw(ch[k-2], ch[k-1], ps[i]) == -1) --k;</span><br><span class="line">  ch.resize(k-1);</span><br><span class="line">  <span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//凸多角形の直径</span></span><br><span class="line"><span class="comment">//直径とは、ある頂点と別の頂点が結ぶ距離の最長のこと</span></span><br><span class="line">double convex_diameter(<span class="keyword">const</span> <span class="keyword">G</span> &amp;pt) &#123;</span><br><span class="line">  <span class="keyword">const</span> int <span class="keyword">n</span> = pt.size();</span><br><span class="line">  int is = 0, js = 0;</span><br><span class="line">  <span class="keyword">for</span> (int i = 1; i &lt; <span class="keyword">n</span>; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (imag(pt[i]) &gt; imag(pt[is])) is = i;</span><br><span class="line">    <span class="keyword">if</span> (imag(pt[i]) &lt; imag(pt[js])) js = i;</span><br><span class="line">  &#125;</span><br><span class="line">  double maxd = <span class="literal">norm</span>(pt[is]-pt[js]);</span><br><span class="line"></span><br><span class="line">  int i, maxi, j, maxj;</span><br><span class="line">  i = maxi = is;</span><br><span class="line">  j = maxj = js;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">cross</span>(diff(pt,i), diff(pt,j)) &gt;= 0) j = (j+1) % <span class="keyword">n</span>;</span><br><span class="line">    <span class="keyword">else</span> i = (i+1) % <span class="keyword">n</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">norm</span>(pt[i]-pt[j]) &gt; maxd) &#123;</span><br><span class="line">      maxd = <span class="literal">norm</span>(pt[i]-pt[j]);</span><br><span class="line">      maxi = i; maxj = j;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">while</span> (i != is || j != js);</span><br><span class="line">  <span class="keyword">return</span> maxd; <span class="comment">/* farthest pair is (maxi, maxj). */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最近点対 (求めるのは距離だけで、ペアの2点は求めない)</span></span><br><span class="line"><span class="comment">//多角形gで呼び出す時は、convex_radius(&amp;g[0], N)みたいに配列になおしてください！</span></span><br><span class="line"><span class="comment">//また、gはあらかじめcompare_xでソートして下さい。</span></span><br><span class="line">double compare_x(<span class="keyword">const</span> P &amp;a, <span class="keyword">const</span> P &amp;b)&#123;</span><br><span class="line">  <span class="keyword">return</span> a.X != b.X ? a.X &lt; b.X : a.Y &lt; b.Y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">double compare_y(<span class="keyword">const</span> P &amp;a, <span class="keyword">const</span> P &amp;b)&#123;</span><br><span class="line">  <span class="keyword">return</span> a.Y != b.Y ? a.Y &lt; b.Y : a.X &lt; b.X;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">double convex_radius(P *a, int <span class="keyword">n</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">n</span> &lt;= 1) <span class="keyword">return</span> <span class="keyword">INF</span>;</span><br><span class="line">  int <span class="keyword">m</span> = <span class="keyword">n</span> / 2;</span><br><span class="line">  double x = a[<span class="keyword">m</span>].X;</span><br><span class="line">  double <span class="keyword">d</span> = <span class="literal">min</span>(convex_radius(a, <span class="keyword">m</span>), convex_radius(a + <span class="keyword">m</span>, <span class="keyword">n</span> - <span class="keyword">m</span>));</span><br><span class="line">  <span class="keyword">sort</span>(a, a + <span class="keyword">n</span>, compare_y);</span><br><span class="line">  vector&lt;P&gt; b;</span><br><span class="line">  <span class="keyword">for</span>(int i = 0; i &lt; <span class="keyword">n</span>; ++i)&#123;</span><br><span class="line">    <span class="keyword">if</span>(fabs(a[i].X - x) &gt;= <span class="keyword">d</span>) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">for</span>(int j = 0; j &lt; (int)b.size(); ++j)&#123;</span><br><span class="line">      P p0 = a[i], p1 = b[(int)(b.size()) - j - 1];</span><br><span class="line">      <span class="keyword">if</span>(p0.Y - p1.Y &gt;= <span class="keyword">d</span>) <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">d</span> = <span class="literal">min</span>(<span class="keyword">d</span>, <span class="literal">abs</span>(p0 - p1));</span><br><span class="line">    &#125;</span><br><span class="line">    b.push_back(a[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">d</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 凸多角形の直線カット</span></span><br><span class="line"><span class="comment">// 凸多角形を直線で切断し、その左側(直線と交差する点も含む)だけを残す</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">G</span> convex_cut(<span class="keyword">const</span> <span class="keyword">G</span> &amp;<span class="keyword">g</span>, <span class="keyword">const</span> <span class="keyword">L</span> &amp;<span class="keyword">l</span>)&#123;</span><br><span class="line">  <span class="keyword">G</span> Q;</span><br><span class="line">  REP(i, <span class="keyword">g</span>.size())&#123;</span><br><span class="line">    P A = curr(<span class="keyword">g</span>, i), B = next(<span class="keyword">g</span>, i);</span><br><span class="line">    <span class="keyword">if</span>(ccw(<span class="keyword">l</span>[0], <span class="keyword">l</span>[1], A) != -1) Q.push_back(A);</span><br><span class="line">    <span class="keyword">if</span>(ccw(<span class="keyword">l</span>[0], <span class="keyword">l</span>[1], A) * ccw(<span class="keyword">l</span>[0], <span class="keyword">l</span>[1], B) &lt; 0) Q.push_back(crosspointLL(<span class="keyword">L</span>(A, B), <span class="keyword">l</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ベクトルの回転</span></span><br><span class="line">P rotation(P v, double r)&#123;</span><br><span class="line">  <span class="keyword">return</span> P(v.<span class="literal">real</span>() * <span class="literal">cos</span>(r) - v.imag() * <span class="literal">sin</span>(r), v.<span class="literal">real</span>() * <span class="literal">sin</span>(r) + v.imag() * <span class="literal">cos</span>(r));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2ベクトル間の角度</span></span><br><span class="line"><span class="literal">atan2</span>(x1 * y2 - x2 * y1, x1 * x2 + y1 * y2);</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>ほとんど<a href="http://www.prefield.com/algorithm/" target="_blank" rel="external">Spaghetti Source</a>のコピペです．</p>
<figure class="highlight ]]>
    </summary>
    
      <category term="競プロ" scheme="http://yoursite.com/categories/%E7%AB%B6%E3%83%97%E3%83%AD/"/>
    
      <category term="library" scheme="http://yoursite.com/categories/%E7%AB%B6%E3%83%97%E3%83%AD/library/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[競プロ用C++ライブラリ-幾何以外]]></title>
    <link href="http://yoursite.com/2015/12/05/%E7%AB%B6%E3%83%97%E3%83%AD%E7%94%A8C-%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA-%E5%B9%BE%E4%BD%95%E4%BB%A5%E5%A4%96/"/>
    <id>http://yoursite.com/2015/12/05/競プロ用C-ライブラリ-幾何以外/</id>
    <published>2015-12-05T05:01:00.000Z</published>
    <updated>2015-12-09T15:47:43.000Z</updated>
    <content type="html"><![CDATA[<p>ほとんど<a href="http://www.prefield.com/algorithm/" target="_blank" rel="external">Spaghetti Source</a>のコピペです．</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span>//</span></span><br><span class="line"><span class="comment">// 構文解析</span></span><br><span class="line"></span><br><span class="line"><span class="function">P <span class="title">fact</span>(<span class="params"><span class="keyword">char</span> *p</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(isdigit(*p))&#123;</span><br><span class="line">    <span class="keyword">int</span> t = *(p++) - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">while</span>(isdigit(*p)) t = t * <span class="number">10</span> + *(p++) - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> P(t, p);</span><br><span class="line">  &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span>(<span class="params">*p == <span class="string">'('</span></span>)</span>&#123;</span><br><span class="line">    P r = expr(p + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(*r.second != <span class="string">')'</span>) exit(<span class="number">0</span>); <span class="comment">//閉じ括弧が無いエラー</span></span><br><span class="line">    <span class="keyword">return</span> P(r.first, r.second + <span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    exit(<span class="number">0</span>); <span class="comment">//括弧でも数字でもないエラー</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">P <span class="title">term</span>(<span class="params"><span class="keyword">char</span> *p</span>)</span>&#123;</span><br><span class="line">  P r = fact(p);</span><br><span class="line">  <span class="keyword">while</span>(*r.second == <span class="string">'*'</span> || *r.second == <span class="string">'/'</span>)&#123;</span><br><span class="line">    <span class="keyword">char</span> op = *r.second;</span><br><span class="line">    <span class="keyword">int</span> tmp = r.first;</span><br><span class="line">    r = fact(r.second + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(op == <span class="string">'*'</span>) r.first *= tmp;</span><br><span class="line">    <span class="keyword">else</span> r.first /= tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">P <span class="title">expr</span>(<span class="params"><span class="keyword">char</span> *p</span>)</span>&#123;</span><br><span class="line">  P r = term(p);</span><br><span class="line">  <span class="keyword">while</span>(*r.second == <span class="string">'+'</span> || *r.second == <span class="string">'-'</span>)&#123;</span><br><span class="line">    <span class="keyword">char</span> op = *r.second;</span><br><span class="line">    <span class="keyword">int</span> tmp = r.first;</span><br><span class="line">    r = term(r.second + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(op == <span class="string">'+'</span>) r.first = tmp + r.first;</span><br><span class="line">    <span class="keyword">else</span> r.first = tmp - r.first;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// 最大公約数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">  <span class="function"><span class="keyword">else</span> return <span class="title">gcd</span>(<span class="params">b, a % b</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// 最小公倍数(gcdが必要)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcm</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a / gcd(a, b) * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// 文字列分割</span></span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">string</span>&gt; <span class="title">split</span>(<span class="params"><span class="keyword">string</span> &amp;str, <span class="keyword">char</span> delim</span>)</span>&#123;</span><br><span class="line">  <span class="function">stringstream <span class="title">ss</span>(<span class="params">str</span>)</span>;</span><br><span class="line">  <span class="keyword">string</span> tmp;</span><br><span class="line">  vector&lt;<span class="keyword">string</span>&gt; res;</span><br><span class="line">  <span class="keyword">while</span>(getline(ss, tmp, delim)) res.push_back(tmp);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// 繰り返し二乗法(xのn乗)</span></span><br><span class="line"></span><br><span class="line"><span class="function">Int <span class="title">mod_pow</span>(<span class="params">Int x, Int n, Int mod</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  Int ret = mod_pow(x * x % mod, n / <span class="number">2</span>, mod);</span><br><span class="line">  <span class="keyword">if</span>(n &amp; <span class="number">1</span>) ret = ret * x % mod;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// 行列累乗</span></span><br><span class="line"></span><br><span class="line">typedef vector&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">typedef vector&lt;vec&gt; mat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line"><span class="comment">//H = 行列の縦, W = 行列の横, M = modをとるときに使う(無い場合は消す)</span></span><br><span class="line"><span class="keyword">int</span> H, W, M = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//A*B</span></span><br><span class="line"><span class="function">mat <span class="title">mul</span>(<span class="params">mat &amp;A, mat &amp;B</span>)</span>&#123;</span><br><span class="line">  <span class="function">mat <span class="title">C</span>(<span class="params">A.size(</span>), <span class="title">vec</span>(<span class="params">B[<span class="number">0</span>].size(</span>)))</span>;</span><br><span class="line">  REP(i, A.size())</span><br><span class="line">    REP(k, B.size())</span><br><span class="line">      REP(j, B[<span class="number">0</span>].size())</span><br><span class="line">        C[i][j] = (C[i][j] + A[i][k] * B[k][j]) % M;</span><br><span class="line">  <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//A^n</span></span><br><span class="line"><span class="function">mat <span class="title">pow</span>(<span class="params">mat A, <span class="keyword">long</span> <span class="keyword">long</span> n</span>)</span>&#123;</span><br><span class="line">  <span class="function">mat <span class="title">B</span>(<span class="params">A.size(</span>), <span class="title">vec</span>(<span class="params">A.size(</span>)))</span>;</span><br><span class="line">  REP(i, A.size())</span><br><span class="line">    B[i][i] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &amp; <span class="number">1</span>) B = mul(B, A);</span><br><span class="line">    A = mul(A, A);</span><br><span class="line">    n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  cin &gt;&gt;H &gt;&gt;W;</span><br><span class="line">  <span class="function">mat <span class="title">A</span>(<span class="params">H, vec(W</span>))</span>;</span><br><span class="line">  <span class="comment">//ここで定式化した行列を代入する</span></span><br><span class="line">  A = pow(A, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// UnionFind</span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v, parent, depth;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span>(<span class="params"><span class="keyword">int</span> a</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(parent[a] == a) <span class="keyword">return</span> a;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> parent[a] = find(parent[a]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">int</span> pa = find(a), pb = find(b);</span><br><span class="line">  <span class="keyword">if</span>(pa == pb) <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(depth[pa] &gt; depth[pb]) swap(pa, pb);</span><br><span class="line">  <span class="keyword">if</span>(depth[pa] == depth[pb]) ++depth[pa];</span><br><span class="line">  parent[pb] = pa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> find(a) == find(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_union_find</span>(<span class="params"><span class="keyword">int</span> V</span>)</span>&#123;</span><br><span class="line">  v = vector&lt;<span class="keyword">int</span>&gt;(V);</span><br><span class="line">  parent = vector&lt;<span class="keyword">int</span>&gt;(V);</span><br><span class="line">  depth = vector&lt;<span class="keyword">int</span>&gt;(V, <span class="number">1</span>);</span><br><span class="line">  REP(i, V) parent[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// UnionFind (重み付き)</span></span><br><span class="line"></span><br><span class="line">map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; v, parent, dist;</span><br><span class="line">map&lt;<span class="keyword">string</span>, <span class="keyword">int</span>&gt; M;</span><br><span class="line"></span><br><span class="line"><span class="comment">// P(parent, dist)</span></span><br><span class="line"><span class="function">P <span class="title">find</span>(<span class="params"><span class="keyword">int</span> a</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(parent[a] == a) <span class="keyword">return</span> P(a, dist[a]);</span><br><span class="line">  P p = find(parent[a]);</span><br><span class="line">  parent[a] = p.first;</span><br><span class="line">  dist[a] += p.second;</span><br><span class="line">  <span class="keyword">return</span> P(p.first, dist[a]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>)</span>&#123; <span class="keyword">return</span> find(a).first == find(b).first; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> dd</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(same(a, b)) <span class="keyword">return</span> ;</span><br><span class="line">  P pa = find(a), pb = find(b);</span><br><span class="line">  <span class="keyword">int</span> d = dd - pb.second + pa.second;</span><br><span class="line">  <span class="keyword">if</span>(d &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    d *= -<span class="number">1</span>;</span><br><span class="line">    swap(pa, pb);</span><br><span class="line">  &#125;</span><br><span class="line">  parent[pb.first] = pa.first;</span><br><span class="line">  dist[pb.first] = d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">distance</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!same(a, b)) <span class="keyword">return</span> INF;</span><br><span class="line">  <span class="keyword">return</span> find(b).second - find(a).second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_union_find</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  v = map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;();</span><br><span class="line">  parent = map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;();</span><br><span class="line">  dist = map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;();</span><br><span class="line">  M = map&lt;<span class="keyword">string</span>, <span class="keyword">int</span>&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// ベルマン-フォード</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> edge &#123; <span class="keyword">int</span> <span class="keyword">from</span>, to, cost; &#125;;</span><br><span class="line">edge es[MAX_E];</span><br><span class="line"><span class="keyword">int</span> d[MAX_V], V, E;</span><br><span class="line"></span><br><span class="line"><span class="comment">//負閉路が存在する場合にfalseを返す</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bellman_ford</span>(<span class="params"><span class="keyword">int</span> s</span>)</span>&#123;</span><br><span class="line">  REP(i, V) d[i] = INF;</span><br><span class="line">  d[s] = <span class="number">0</span>;</span><br><span class="line">  REP(i, V + <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">bool</span> update = <span class="keyword">false</span>;</span><br><span class="line">    REP(j, E)&#123;</span><br><span class="line">      edge e = es[j];</span><br><span class="line">      <span class="keyword">if</span>(d[e.<span class="keyword">from</span>] != INF &amp;&amp; d[e.to] &gt; d[e.<span class="keyword">from</span>] + e.cost)&#123;</span><br><span class="line">        d[e.to] = d[e.<span class="keyword">from</span>] + e.cost;</span><br><span class="line">        <span class="keyword">if</span>(i == V) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        update = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// ワーシャル-フロイド法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> V;</span><br><span class="line"></span><br><span class="line"><span class="comment">//負閉路が存在する場合にfalseを返す</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">warshall_floyd</span>(<span class="params"><span class="keyword">long</span> c[MAX_V][MAX_V]</span>)</span>&#123;</span><br><span class="line">  REP(k, V)</span><br><span class="line">    REP(i, V)</span><br><span class="line">      REP(j, V)</span><br><span class="line">        <span class="keyword">if</span>(c[i][k] != INF &amp;&amp; c[k][j] != INF) c[i][j] = min(c[i][j], c[i][k] + c[k][j]);</span><br><span class="line">  REP(i, V) <span class="keyword">if</span>(c[i][i] &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// クラスカル法(Unionfindあるのが前提)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> edge &#123;</span><br><span class="line">  <span class="keyword">int</span> f, t, c;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> edge &amp;e) <span class="keyword">const</span> &#123; <span class="keyword">return</span> c &lt; e.c; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span>(<span class="params"><span class="keyword">int</span> V, <span class="keyword">int</span> E, vector&lt;edge&gt; es</span>)</span>&#123;</span><br><span class="line">  sort(es.begin(), es.end());</span><br><span class="line">  init_union_find(V);</span><br><span class="line">  <span class="keyword">int</span> min_cost = <span class="number">0</span>;</span><br><span class="line">  REP(i, E)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!same(es[i].f, es[i].t))&#123;</span><br><span class="line">      min_cost += es[i].c;</span><br><span class="line">      merge(es[i].f, es[i].t);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> min_cost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// プリム法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span>(<span class="params"><span class="keyword">int</span> v[N][N]</span>)</span>&#123;</span><br><span class="line">  priority_queue&lt; P, vector&lt;P&gt;, greater&lt;P&gt; &gt; open;</span><br><span class="line">  open.push(P(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">  <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">closed</span>(<span class="params">V, INF</span>)</span>;</span><br><span class="line">  <span class="keyword">int</span> min_cost = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(!open.empty())&#123;</span><br><span class="line">    P now = open.top(); open.pop();</span><br><span class="line">    <span class="keyword">if</span>(closed[now.second] != INF) <span class="keyword">continue</span>;</span><br><span class="line">    closed[now.second] = now.first;</span><br><span class="line">    min_cost += now.first;</span><br><span class="line">    REP(i, V)&#123;</span><br><span class="line">      <span class="keyword">if</span>(closed[i] == INF &amp;&amp; v[now.second][i] != INF) open.push(P(v[now.second][i], i));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> min_cost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// セグメント木</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = (<span class="number">1</span> &lt;&lt; <span class="number">17</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483647</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要素の数、区間などを何からの値を覚えておく配列</span></span><br><span class="line"><span class="keyword">int</span> n, v[<span class="number">2</span> * MAX_N - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初期化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span>(<span class="params"><span class="keyword">int</span> _n</span>)</span>&#123;</span><br><span class="line">  n = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(n &lt; _n) n *= <span class="number">2</span>;</span><br><span class="line">  REP(i, <span class="number">2</span> * n - <span class="number">1</span>) v[i] = INF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添字がkのものをaに更新</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span>(<span class="params"><span class="keyword">int</span> k, <span class="keyword">int</span> a</span>)</span>&#123;</span><br><span class="line">  k += n - <span class="number">1</span>;</span><br><span class="line">  v[k] = a;</span><br><span class="line">  <span class="keyword">while</span>(k &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    k = (k - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    v[k] = min(v[k * <span class="number">2</span> + <span class="number">1</span>], v[k * <span class="number">2</span> + <span class="number">2</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [a, b)の最小値を求める</span></span><br><span class="line"><span class="comment">// kは今見ている添字、l, rはそれに対応する[l, r)</span></span><br><span class="line"><span class="comment">// 呼び出す時はquery(a, b, 0, 0, n)として呼ぶ</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(b &lt;= l || a &gt;= r) <span class="keyword">return</span> INF;</span><br><span class="line">  <span class="keyword">if</span>(a &lt;= l &amp;&amp; b &gt;= r) <span class="keyword">return</span> v[k];</span><br><span class="line">  <span class="keyword">int</span> vl = query(a, b, k * <span class="number">2</span> + <span class="number">1</span>, l, (l + r) / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">int</span> vr = query(a, b, k * <span class="number">2</span> + <span class="number">2</span>, (l + r) / <span class="number">2</span>, r);</span><br><span class="line">  <span class="keyword">return</span> min(vl, vr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// Binary Indexed Tree (数列の添字は1はじまり)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> bit[MAX_N + <span class="number">1</span>], n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  memset(bit, <span class="number">0</span>, <span class="keyword">sizeof</span>(bit));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span>(<span class="params"><span class="keyword">int</span> i</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(i &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    ret += bit[i];</span><br><span class="line">    i -= (i &amp; -i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span>(<span class="params"><span class="keyword">int</span> i, <span class="keyword">int</span> x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(i &lt;= n)&#123;</span><br><span class="line">    bit[i] += x;</span><br><span class="line">    i += (i &amp; -i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// フロー(Dinic)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_V = <span class="number">305</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Edge</span>&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> to, cap, rev;</span><br><span class="line">    Edge(<span class="keyword">int</span> _to, <span class="keyword">int</span> _cap, <span class="keyword">int</span> _rev)&#123; to = _to; cap = _cap; rev = _rev; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;Edge&gt; G[MAX_V];</span><br><span class="line"><span class="keyword">int</span> level[MAX_V], iter[MAX_V];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span>(<span class="params"><span class="keyword">int</span> <span class="keyword">from</span>, <span class="keyword">int</span> to, <span class="keyword">int</span> cap</span>)</span>&#123;</span><br><span class="line">  G[<span class="keyword">from</span>].push_back(Edge(to, cap, G[to].size()));</span><br><span class="line">  G[to].push_back(Edge(<span class="keyword">from</span>, <span class="number">0</span>, G[<span class="keyword">from</span>].size() - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span>(<span class="params"><span class="keyword">int</span> s</span>)</span>&#123;</span><br><span class="line">  memset(level, -<span class="number">1</span>, <span class="keyword">sizeof</span>(level));</span><br><span class="line">  queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">  level[s] = <span class="number">0</span>;</span><br><span class="line">  q.push(s);</span><br><span class="line">  <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">    <span class="keyword">int</span> v = q.front(); q.pop();</span><br><span class="line">    REP(i, G[v].size())&#123;</span><br><span class="line">      Edge &amp;e = G[v][i];</span><br><span class="line">      <span class="keyword">if</span>(e.cap &gt; <span class="number">0</span> &amp;&amp; level[e.to] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        level[e.to] = level[v] + <span class="number">1</span>;</span><br><span class="line">        q.push(e.to);</span><br><span class="line">&#125; &#125; &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span>(<span class="params"><span class="keyword">int</span> v, <span class="keyword">int</span> t, <span class="keyword">int</span> f</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(v == t) <span class="keyword">return</span> f;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> &amp;i = iter[v]; i &lt; G[v].size(); ++i)&#123;</span><br><span class="line">    Edge &amp;e = G[v][i];</span><br><span class="line">    <span class="keyword">if</span>(e.cap &gt; <span class="number">0</span> &amp;&amp; level[v] &lt; level[e.to])&#123;</span><br><span class="line">      <span class="keyword">int</span> d = dfs(e.to, t, min(f, e.cap));</span><br><span class="line">      <span class="keyword">if</span>(d &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        e.cap -= d;</span><br><span class="line">        G[e.to][e.rev].cap += d;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">  &#125; &#125; &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_flow</span>(<span class="params"><span class="keyword">int</span> s, <span class="keyword">int</span> t</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">    bfs(s);</span><br><span class="line">    <span class="keyword">if</span> (level[t] &lt; <span class="number">0</span>) <span class="keyword">return</span> flow;</span><br><span class="line">    memset(iter, <span class="number">0</span>, <span class="keyword">sizeof</span>(iter));</span><br><span class="line">    <span class="keyword">int</span> f;</span><br><span class="line">    <span class="keyword">while</span>((f = dfs(s, t, INF)) &gt; <span class="number">0</span>)</span><br><span class="line">      flow += f;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// kD Tree (nth_elementが遅く、ノード数が10^5とかだと約9秒かかる)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> kdTree &#123;</span><br><span class="line">  <span class="keyword">int</span> removed;</span><br><span class="line">  <span class="keyword">struct</span> Node &#123;</span><br><span class="line">    <span class="keyword">int</span> x, y, n;</span><br><span class="line">    <span class="keyword">bool</span> removed;</span><br><span class="line">    Node *ch[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> size, ht;</span><br><span class="line">    Node(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> n) : x(x), y(y), n(n), removed(<span class="keyword">false</span>) &#123; ch[<span class="number">0</span>] = ch[<span class="number">1</span>] = <span class="number">0</span>; &#125;</span><br><span class="line">    Node() : x(-<span class="number">1</span>), y(-<span class="number">1</span>), n(-<span class="number">1</span>), removed(<span class="keyword">false</span>) &#123; ch[<span class="number">0</span>] = ch[<span class="number">1</span>] = <span class="number">0</span>; &#125;</span><br><span class="line">  &#125; *r;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">size</span>(<span class="params">Node *t</span>) </span>&#123; <span class="keyword">return</span> t ? t-&gt;size : <span class="number">0</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">ht</span>(<span class="params">Node *t</span>) </span>&#123; <span class="keyword">return</span> t ? t-&gt;ht : <span class="number">0</span>; &#125;</span><br><span class="line">  Node *update(Node *t) &#123;</span><br><span class="line">    <span class="keyword">if</span> (t == NULL) <span class="keyword">return</span> t;</span><br><span class="line">    t-&gt;size = <span class="number">1</span> + size(t-&gt;ch[<span class="number">0</span>]) + size(t-&gt;ch[<span class="number">1</span>]);</span><br><span class="line">    t-&gt;ht = <span class="number">1</span> + max(ht(t-&gt;ch[<span class="number">0</span>]), ht(t-&gt;ch[<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">struct</span> Compare &#123;</span><br><span class="line">    <span class="keyword">int</span> d;</span><br><span class="line">    Compare(<span class="keyword">int</span> d) : d(d) &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span>(<span class="params"></span>)(<span class="params">Node *i, Node *j</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> d == <span class="number">0</span> ? (i-&gt;x &lt;= j-&gt;x) : (i-&gt;y &lt;= j-&gt;y);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  Node *build(Node **b, Node **e, <span class="keyword">int</span> d) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e - b &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//qsort(b, (size_t)(e - b), sizeof((*b)), d % 2 ? cmp_y : cmp_x);</span></span><br><span class="line">    Node **m = b + (e - b) / <span class="number">2</span>;</span><br><span class="line">    nth_element(b, m, e, Compare(d)); </span><br><span class="line">    <span class="comment">//for(Node **i = b; i != e; ++i) cout &lt;&lt;(**i).n &lt;&lt;", "; cout &lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt;(**m).n &lt;&lt;endl;</span></span><br><span class="line">    (*m)-&gt;ch[<span class="number">0</span>] = build(b, m, (d+<span class="number">1</span>)%D);</span><br><span class="line">    (*m)-&gt;ch[<span class="number">1</span>] = build(m+<span class="number">1</span>, e, (d+<span class="number">1</span>)%D);</span><br><span class="line">    <span class="keyword">return</span> update(*m);</span><br><span class="line">  &#125;</span><br><span class="line">  Node **flatten(Node *r, Node **buf) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!r) <span class="keyword">return</span> buf;</span><br><span class="line">    buf = flatten(r-&gt;ch[<span class="number">0</span>], buf);</span><br><span class="line">    <span class="keyword">if</span> (!r-&gt;removed) *(buf++) = r;</span><br><span class="line">    <span class="keyword">return</span> flatten(r-&gt;ch[<span class="number">1</span>], buf);</span><br><span class="line">  &#125;</span><br><span class="line">  Node *rebuild(Node *r, <span class="keyword">int</span> d) &#123;</span><br><span class="line">    Node *b[size(r)], **e = flatten(r, b);</span><br><span class="line">    removed -= size(r) - (e - b);</span><br><span class="line">    <span class="keyword">return</span> build(b, e, d);</span><br><span class="line">  &#125;</span><br><span class="line">  Node *insert(Node *t, Node *p, <span class="keyword">int</span> d) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) <span class="keyword">return</span> update(p);</span><br><span class="line">    <span class="keyword">int</span> b = !Compare(d)(p, t); </span><br><span class="line">    t-&gt;ch[b] = insert(t-&gt;ch[b], p, (d+<span class="number">1</span>)%D);</span><br><span class="line">    t = update(t);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">3</span> * log(size(t)) &lt; ht(t)) t = rebuild(t, d);</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert</span>(<span class="params"><span class="keyword">int</span> x, <span class="keyword">int</span> y</span>) </span>&#123; r = insert(r, <span class="keyword">new</span> Node(x,y,size(r)), <span class="number">0</span>); &#125;</span><br><span class="line">  Node *find(Node *t, Node *p, <span class="keyword">int</span> d) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    Node *f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!t-&gt;removed &amp;&amp; t-&gt;x == p-&gt;x &amp;&amp; t-&gt;y == p-&gt;y) f = t;</span><br><span class="line">    <span class="keyword">if</span> (!f &amp;&amp; !Compare(d)(p,t)) f = find(t-&gt;ch[<span class="number">1</span>], p, (d+<span class="number">1</span>)%D);</span><br><span class="line">    <span class="keyword">if</span> (!f &amp;&amp; !Compare(d)(t,p)) f = find(t-&gt;ch[<span class="number">0</span>], p, (d+<span class="number">1</span>)%D);</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">  &#125;</span><br><span class="line">  Node *find(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123; <span class="function">Node <span class="title">n</span>(<span class="params">x,y,-<span class="number">1</span></span>)</span>; <span class="keyword">return</span> find(r, &amp;n, <span class="number">0</span>); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">count</span>(<span class="params">Node *t, Node *S, Node *T, <span class="keyword">int</span> d, <span class="keyword">int</span> *cnt, <span class="keyword">int</span> idx[MAX_N]</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span> (!t-&gt;removed &amp;&amp; t-&gt;x &gt;= S-&gt;x &amp;&amp; t-&gt;x &lt;= T-&gt;x &amp;&amp; t-&gt;y &gt;= S-&gt;y &amp;&amp; t-&gt;y &lt;= T-&gt;y) idx[(*cnt)++] = t-&gt;n;</span><br><span class="line">    <span class="keyword">if</span> (Compare(d)(S,t)) count(t-&gt;ch[<span class="number">0</span>], S, T, (d+<span class="number">1</span>)%D, cnt, idx);</span><br><span class="line">    <span class="keyword">if</span> (Compare(d)(t,T)) count(t-&gt;ch[<span class="number">1</span>], S, T, (d+<span class="number">1</span>)%D, cnt, idx);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">remove</span>(<span class="params"><span class="keyword">int</span> x, <span class="keyword">int</span> y</span>) </span>&#123; </span><br><span class="line">    Node *f = find(x, y);</span><br><span class="line">    <span class="keyword">if</span> (!f) <span class="keyword">return</span>;</span><br><span class="line">    f-&gt;removed = <span class="keyword">true</span>;</span><br><span class="line">    ++removed;</span><br><span class="line">    <span class="keyword">if</span> (removed*<span class="number">2</span> &gt; r-&gt;size) r = rebuild(r, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  kdTree(<span class="keyword">int</span> p[][<span class="number">2</span>], <span class="keyword">int</span> n) : removed(<span class="number">0</span>) &#123;</span><br><span class="line">    Node *node[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) </span><br><span class="line">      node[i] = <span class="keyword">new</span> Node(p[i][<span class="number">0</span>], p[i][<span class="number">1</span>], i);</span><br><span class="line">    r = build(node, node+n, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// ダイクストラ</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dijkstra</span>(<span class="params"><span class="keyword">const</span> vector&lt; vector&lt;P&gt; &gt; &amp;cost, <span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> V</span>)</span>&#123;</span><br><span class="line">  priority_queue&lt;P, vector&lt;P&gt;, greater&lt;P&gt; &gt; open;</span><br><span class="line">  open.push(P(<span class="number">0</span>, s));</span><br><span class="line">  <span class="keyword">int</span> closed[MAX_V];</span><br><span class="line">  REP(i, V) closed[i] = INF;</span><br><span class="line">  <span class="keyword">while</span>(!open.empty())&#123;</span><br><span class="line">    P tmp = open.top(); open.pop();</span><br><span class="line">    <span class="keyword">int</span> now = tmp.second, c = tmp.first;</span><br><span class="line">    <span class="keyword">if</span>(closed[now] &lt; c) <span class="keyword">continue</span>;</span><br><span class="line">    closed[now] = c;</span><br><span class="line">    REP(i, cost[now].size())&#123;</span><br><span class="line">      <span class="keyword">int</span> next = cost[now][i].second, nc = cost[now][i].first;</span><br><span class="line">      <span class="keyword">if</span>(nc == INF || c + nc &gt;= closed[next]) <span class="keyword">continue</span>;</span><br><span class="line">      closed[next] = c + nc;</span><br><span class="line">      open.push(P(closed[next], next));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> closed[t];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// 関節点列挙 (関節点とは、その点を削除するとグラフが2つに分かれてしまうような点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span>(<span class="params"><span class="keyword">int</span> u, <span class="keyword">int</span> prev, <span class="keyword">int</span> *cnt, <span class="keyword">int</span> *visited, <span class="keyword">int</span> *prenum, <span class="keyword">int</span> *lowest, <span class="keyword">int</span> *parent, vector&lt; vector&lt;<span class="keyword">int</span>&gt; &gt; &amp;v</span>)</span>&#123;</span><br><span class="line">  visited[u] = <span class="keyword">true</span>;</span><br><span class="line">  prenum[u] = lowest[u] = *cnt;</span><br><span class="line">  REP(i, v[u].size())&#123;</span><br><span class="line">    <span class="keyword">int</span> next = v[u][i];</span><br><span class="line">    <span class="keyword">if</span>(!visited[next])&#123;</span><br><span class="line">      parent[next] = u;</span><br><span class="line">      ++(*cnt);</span><br><span class="line">      dfs(next, u, cnt, visited, prenum, lowest, parent, v);</span><br><span class="line">      lowest[u] = min(lowest[u], lowest[next]);</span><br><span class="line">    &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span>(<span class="params">next != prev</span>)</span><br><span class="line">      lowest[u] </span>= min(lowest[u], prenum[next]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">articulation_points</span>(<span class="params"><span class="keyword">int</span> V, <span class="keyword">int</span> E, vector&lt; vector&lt;<span class="keyword">int</span>&gt; &gt; &amp;v</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">int</span> visited[V], prenum[V], lowest[V], parent[V];</span><br><span class="line">  memset(visited, <span class="number">0</span>, <span class="keyword">sizeof</span>(visited));</span><br><span class="line">  parent[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> tmp = <span class="number">1</span>;</span><br><span class="line">  dfs(<span class="number">0</span>, -<span class="number">1</span>, &amp;tmp, visited, prenum, lowest, parent, v);</span><br><span class="line">  vector&lt;<span class="keyword">int</span>&gt; ret;</span><br><span class="line">  <span class="keyword">int</span> cnt = <span class="number">0</span>, used[V];</span><br><span class="line">  memset(used, <span class="number">0</span>, <span class="keyword">sizeof</span>(used));</span><br><span class="line">  FOR(i, <span class="number">1</span>, V)&#123;</span><br><span class="line">    <span class="keyword">if</span>(parent[i] == <span class="number">0</span>) ++cnt;</span><br><span class="line">    <span class="keyword">if</span>(parent[i] &gt; <span class="number">0</span> &amp;&amp; !used[parent[i]] &amp;&amp; prenum[parent[i]] &lt;= lowest[i])&#123;</span><br><span class="line">      used[parent[i]] = <span class="keyword">true</span>;</span><br><span class="line">      ret.push_back(parent[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(cnt &gt;= <span class="number">2</span>) ret.push_back(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// 橋列挙 (橋とは、その辺を削除するとグラフが2つに分かれてしまうような辺</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span>(<span class="params"><span class="keyword">int</span> u, <span class="keyword">int</span> prev, <span class="keyword">int</span> *cnt, <span class="keyword">int</span> *prenum, <span class="keyword">int</span> *lowest, vector&lt; vector&lt;<span class="keyword">int</span>&gt; &gt; &amp;v, vector&lt;P&gt; &amp;res</span>)</span>&#123;</span><br><span class="line">  prenum[u] = lowest[u] = ++(*cnt);</span><br><span class="line">  REP(i, v[u].size())&#123;</span><br><span class="line">    <span class="keyword">int</span> next = v[u][i];</span><br><span class="line">    <span class="keyword">if</span>(prenum[next] == -<span class="number">1</span>)&#123;</span><br><span class="line">      lowest[u] = min(lowest[u], dfs(next, u, cnt, prenum, lowest, v, res));</span><br><span class="line">      <span class="keyword">if</span>(lowest[next] == prenum[next]) res.push_back(P(min(u, next), max(u, next)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">else</span> <span class="title">if</span>(<span class="params">prev != next</span>)</span><br><span class="line">      lowest[u] </span>= min(lowest[u], lowest[next]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lowest[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;P&gt; <span class="title">bridges</span>(<span class="params"><span class="keyword">int</span> V, <span class="keyword">int</span> E, vector&lt; vector&lt;<span class="keyword">int</span>&gt; &gt; &amp;v</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">int</span> prenum[V], lowest[V];</span><br><span class="line">  memset(prenum, -<span class="number">1</span>, <span class="keyword">sizeof</span>(prenum));</span><br><span class="line">  <span class="keyword">int</span> tmp = <span class="number">1</span>;</span><br><span class="line">  vector&lt;P&gt; res;</span><br><span class="line">  dfs(<span class="number">0</span>, -<span class="number">1</span>, &amp;tmp, prenum, lowest, v, res);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// 強連結成分分解</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span>(<span class="params"><span class="keyword">int</span> v, <span class="keyword">int</span> *used, vector&lt; vector&lt;<span class="keyword">int</span>&gt; &gt; &amp;G, vector&lt;<span class="keyword">int</span>&gt; &amp;vs</span>)</span>&#123;</span><br><span class="line">  used[v] = <span class="keyword">true</span>;</span><br><span class="line">  REP(i, G[v].size())&#123;</span><br><span class="line">    <span class="keyword">int</span> next = G[v][i];</span><br><span class="line">    <span class="keyword">if</span>(!used[next]) dfs(next, used, G, vs);</span><br><span class="line">  &#125;</span><br><span class="line">  vs.push_back(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rdfs</span>(<span class="params"><span class="keyword">int</span> v, <span class="keyword">int</span> cnt, <span class="keyword">int</span> *used, vector&lt;<span class="keyword">int</span>&gt; &amp;cmp, vector&lt; vector&lt;<span class="keyword">int</span>&gt; &gt; &amp;G</span>)</span>&#123;</span><br><span class="line">  used[v] = <span class="keyword">true</span>;</span><br><span class="line">  cmp[v] = cnt;</span><br><span class="line">  REP(i, G[v].size())&#123;</span><br><span class="line">    <span class="keyword">int</span> next = G[v][i];</span><br><span class="line">    <span class="keyword">if</span>(!used[next]) rdfs(next, cnt, used, cmp, G);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Gは元々の有向グラフの隣接リスト、RGは辺の向きを逆にした隣接リスト</span></span><br><span class="line"><span class="comment">//返り値は、任意のノードが何番目の強連結成分に属するか。cmp[a] == cmp[b]を満たせばa, bは同じ成分に属する。</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">scc</span>(<span class="params"><span class="keyword">int</span> V, vector&lt; vector&lt;<span class="keyword">int</span>&gt; &gt; &amp;G, vector&lt; vector&lt;<span class="keyword">int</span>&gt; &gt; &amp;RG</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">int</span> used[V];</span><br><span class="line">  memset(used, <span class="number">0</span>, <span class="keyword">sizeof</span>(used));</span><br><span class="line">  vector&lt;<span class="keyword">int</span>&gt; vs, cmp(V);</span><br><span class="line">  REP(i, V) <span class="keyword">if</span>(!used[i]) dfs(i, used, G, vs);</span><br><span class="line">  memset(used, <span class="number">0</span>, <span class="keyword">sizeof</span>(used));</span><br><span class="line">  <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">  REVERSE(vs);</span><br><span class="line">  REP(i, vs.size()) <span class="keyword">if</span>(!used[vs[i]]) rdfs(vs[i], cnt++, used, cmp, RG);</span><br><span class="line">  <span class="keyword">return</span> cmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// 閉路検出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//コストを全て-1にして各ノードについてベルマンフォード (コード略)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// 木の直径</span></span><br><span class="line"></span><br><span class="line"><span class="function">P <span class="title">visit</span>(<span class="params"><span class="keyword">int</span> v, <span class="keyword">int</span> prev, vector&lt; vector&lt;P&gt; &gt; &amp;G</span>) </span>&#123;</span><br><span class="line">  <span class="function">P <span class="title">res</span>(<span class="params">v, <span class="number">0</span></span>)</span>;</span><br><span class="line">  REP(i, G[v].size())&#123;</span><br><span class="line">    <span class="keyword">if</span>(G[v][i].first != prev)&#123;</span><br><span class="line">      P t = visit(G[v][i].first, v, G);</span><br><span class="line">      t.second += G[v][i].second;</span><br><span class="line">      <span class="keyword">if</span> (res.second &lt; t.second) res = t;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">diameter</span>(<span class="params">vector&lt; vector&lt;P&gt; &gt; &amp;G</span>) </span>&#123;</span><br><span class="line">  P r = visit(<span class="number">0</span>, -<span class="number">1</span>, G);</span><br><span class="line">  P t = visit(r.first, -<span class="number">1</span>, G);</span><br><span class="line">  <span class="keyword">return</span> t.second; <span class="comment">// (r.first, t.first) is farthest pair</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// 最小有向全域木</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span>(<span class="params"><span class="keyword">int</span> V, <span class="keyword">int</span> G[MAX_V][MAX_V], <span class="keyword">int</span> v, <span class="keyword">int</span> s, <span class="keyword">int</span> r,</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; &amp;no, vector&lt; vector&lt;<span class="keyword">int</span>&gt; &gt; &amp;comp,</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; &amp;prev, vector&lt; vector&lt;<span class="keyword">int</span>&gt; &gt; &amp;next,</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; &amp;mcost, vector&lt;<span class="keyword">int</span>&gt; &amp;mark,</span><br><span class="line">    <span class="keyword">int</span> &amp;cost, <span class="keyword">bool</span> &amp;found</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (mark[v]) &#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; temp = no;</span><br><span class="line">    found = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      cost += mcost[v];</span><br><span class="line">      v = prev[v];</span><br><span class="line">      <span class="keyword">if</span> (v != s) &#123;</span><br><span class="line">        <span class="keyword">while</span> (comp[v].size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          no[comp[v].back()] = s;</span><br><span class="line">          comp[s].push_back(comp[v].back());</span><br><span class="line">          comp[v].pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (v != s);</span><br><span class="line">    REP(i, V)&#123;</span><br><span class="line">      <span class="keyword">if</span>(i != r &amp;&amp; no[i] == s)</span><br><span class="line">        REP(j, V)&#123;</span><br><span class="line">          <span class="keyword">if</span> (no[j] != s &amp;&amp; G[j][i] &lt; INF) G[j][i] -= mcost[temp[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  mark[v] = <span class="keyword">true</span>;</span><br><span class="line">  REP(i, next[v].size())</span><br><span class="line">    <span class="keyword">if</span>(no[next[v][i]] != no[v] &amp;&amp; prev[no[next[v][i]]] == v)</span><br><span class="line">      <span class="keyword">if</span> (!mark[no[next[v][i]]] || next[v][i] == s)</span><br><span class="line">        visit(V, G, next[v][i], s, r, no, comp, prev, next, mcost, mark, cost, found);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minimumSpanningArborescence</span>(<span class="params"><span class="keyword">int</span> V, <span class="keyword">int</span> E, <span class="keyword">int</span> G[MAX_V][MAX_V], <span class="keyword">int</span> r</span>) </span>&#123;</span><br><span class="line">  <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">no</span>(<span class="params">V</span>)</span>;</span><br><span class="line">  vector&lt; vector&lt;<span class="keyword">int</span>&gt; &gt; comp(V);</span><br><span class="line">  REP(i, V) comp[i].push_back(no[i] = i);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> cost = <span class="number">0</span>; ;) &#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">prev</span>(<span class="params">V, -<span class="number">1</span></span>)</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">mcost</span>(<span class="params">V, INF</span>)</span>;</span><br><span class="line">    REP(i, V)&#123;</span><br><span class="line">      REP(j, V)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j == r || G[i][j] == INF || no[i] == no[j] || G[i][j] &gt; mcost[no[j]]) <span class="keyword">continue</span>;</span><br><span class="line">        mcost[no[j]] = G[i][j];</span><br><span class="line">        prev[no[j]] = no[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt; vector&lt;<span class="keyword">int</span>&gt; &gt; next(V);</span><br><span class="line">    REP(i, V)</span><br><span class="line">      <span class="keyword">if</span>(prev[i] &gt;= <span class="number">0</span>)</span><br><span class="line">        next[prev[i]].push_back(i);</span><br><span class="line">    <span class="keyword">bool</span> stop = <span class="keyword">true</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">mark</span>(<span class="params">V, <span class="keyword">false</span></span>)</span>;</span><br><span class="line">    REP(i, V)</span><br><span class="line">      <span class="keyword">if</span>(i != r &amp;&amp; !mark[i] &amp;&amp; !comp[i].empty()) &#123;</span><br><span class="line">        <span class="keyword">bool</span> found = <span class="keyword">false</span>;</span><br><span class="line">        visit(V, G, i, i, r, no, comp, prev, next, mcost, mark, cost, found);</span><br><span class="line">        <span class="keyword">if</span> (found) stop = <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">if</span> (stop) &#123;</span><br><span class="line">      REP(i, V) <span class="keyword">if</span> (prev[i] &gt;= <span class="number">0</span>) cost += mcost[i];</span><br><span class="line">      <span class="keyword">return</span> cost;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> V, E, r;</span><br><span class="line">  cin &gt;&gt;V &gt;&gt;E &gt;&gt;r;</span><br><span class="line">  <span class="keyword">int</span> G[MAX_V][MAX_V];</span><br><span class="line">  REP(i, V) REP(j, V) G[i][j] = (i == j ? <span class="number">0</span> : INF);</span><br><span class="line">  REP(i, E)&#123;</span><br><span class="line">    <span class="keyword">int</span> f, t, c; cin &gt;&gt;f &gt;&gt;t &gt;&gt;c;</span><br><span class="line">    G[f][t] = c;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt;minimumSpanningArborescence(V, E, G, r) &lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// 2部マッチング(容量が全て1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> V, match[MAX_V], used[MAX_V];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; G[MAX_V];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span>(<span class="params"><span class="keyword">int</span> v</span>)</span>&#123;</span><br><span class="line">  used[v] = <span class="keyword">true</span>;</span><br><span class="line">  REP(i, G[v].size())&#123;</span><br><span class="line">    <span class="keyword">int</span> u = G[v][i], w = match[u];</span><br><span class="line">    <span class="keyword">if</span>(w &lt; <span class="number">0</span> || (!used[w] &amp;&amp; dfs(w)))&#123;</span><br><span class="line">      match[v] = u;</span><br><span class="line">      match[u] = v;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bipartite_matching</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">  memset(match, -<span class="number">1</span>, <span class="keyword">sizeof</span>(match));</span><br><span class="line">  REP(v, V)</span><br><span class="line">    <span class="keyword">if</span>(match[v] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">      memset(used, <span class="number">0</span>, <span class="keyword">sizeof</span>(used));</span><br><span class="line">      <span class="keyword">if</span>(dfs(v)) ++res;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> X, Y, E; cin &gt;&gt;X &gt;&gt;Y &gt;&gt;E;</span><br><span class="line">  V = X + Y;</span><br><span class="line">  REP(i, E)&#123;</span><br><span class="line">    <span class="keyword">int</span> u, v; cin &gt;&gt;u &gt;&gt;v;</span><br><span class="line">    v += X;</span><br><span class="line">    G[u].push_back(v);</span><br><span class="line">    G[v].push_back(u);</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt;bipartite_matching() &lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// コインDP</span></span><br><span class="line"><span class="comment">// (複数の金額について出力せよという問題が多いと思うので、答えは返さずDP表をつくるだけ)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//d = コインの種類の数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">coinDP</span>(<span class="params"><span class="keyword">int</span> d, <span class="keyword">int</span> *coins, <span class="keyword">int</span> *dp</span>)</span>&#123;</span><br><span class="line">  REP(i, MAX_COST + <span class="number">1</span>) dp[i] = INF;</span><br><span class="line">  dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  REP(i, d)</span><br><span class="line">    FOR(j, coins[i], MAX_COST+ <span class="number">1</span>)</span><br><span class="line">      dp[j] = min(dp[j], dp[j - coins[i]] + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// ナップザック(入れるものは1種類につき1つ)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//N = 入れるものの数, W = 許される最大の重量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">knapsack</span>(<span class="params"><span class="keyword">int</span> N, <span class="keyword">int</span> W, <span class="keyword">int</span> *v, <span class="keyword">int</span> *w</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">int</span> dp[N + <span class="number">1</span>][W + <span class="number">1</span>];</span><br><span class="line">  memset(dp, -<span class="number">1</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">  dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  REP(i, N)&#123;</span><br><span class="line">    REP(j, W + <span class="number">1</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(dp[i][j] &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">      dp[i + <span class="number">1</span>][j] = max(dp[i + <span class="number">1</span>][j], dp[i][j]);</span><br><span class="line">      <span class="keyword">if</span>(j + w[i] &lt;= W) dp[i + <span class="number">1</span>][j + w[i]] = max(dp[i + <span class="number">1</span>][j + w[i]], dp[i][j] + v[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  REP(i, W + <span class="number">1</span>) ans = max(ans, dp[N][i]);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// ナップザック(入れるものは1種類につきいくつでも)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">multiple_knapsack</span>(<span class="params"><span class="keyword">int</span> N, <span class="keyword">int</span> W, <span class="keyword">int</span> *v, <span class="keyword">int</span> *w</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">int</span> dp[N + <span class="number">1</span>][W + <span class="number">1</span>];</span><br><span class="line">  memset(dp, -<span class="number">1</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">  REP(i, W + <span class="number">1</span>) dp[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">  REP(i, N)&#123;</span><br><span class="line">    REP(j, W + <span class="number">1</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(dp[i][j] &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">      dp[i + <span class="number">1</span>][j] = max(dp[i + <span class="number">1</span>][j], dp[i][j]);</span><br><span class="line">      <span class="keyword">if</span>(j - w[i] &gt;= <span class="number">0</span>) dp[i + <span class="number">1</span>][j] = max(dp[i + <span class="number">1</span>][j], dp[i + <span class="number">1</span>][j - w[i]] + v[i]);</span><br><span class="line">      <span class="keyword">if</span>(j + w[i] &lt;= W) dp[i + <span class="number">1</span>][j + w[i]] = max(dp[i + <span class="number">1</span>][j + w[i]], dp[i][j] + v[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  REP(i, W + <span class="number">1</span>) ans = max(ans, dp[N][i]);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// 最長増加部分列</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LIS</span>(<span class="params"><span class="keyword">int</span> N, <span class="keyword">int</span> *a</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">int</span> dp[N];</span><br><span class="line">  fill(dp, dp + N, INF);</span><br><span class="line">  REP(i, N) *lower_bound(dp, dp + N, a[i]) = a[i];</span><br><span class="line">  <span class="keyword">return</span> lower_bound(dp, dp + N, INF) - dp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// 編集距離(レーベンシュタイン距離)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LD</span>(<span class="params"><span class="keyword">string</span> &amp;A, <span class="keyword">string</span> &amp;B</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">int</span> al = A.length(), bl = B.length(), dp[al + <span class="number">1</span>][bl + <span class="number">1</span>];</span><br><span class="line">  REP(i, al + <span class="number">1</span>) REP(j, bl + <span class="number">1</span>) dp[i][j] = (i == <span class="number">0</span> || j == <span class="number">0</span> ? max(i, j) : INF);</span><br><span class="line">  FOR(i, <span class="number">1</span>, al + <span class="number">1</span>)</span><br><span class="line">    FOR(j, <span class="number">1</span>, bl + <span class="number">1</span>)</span><br><span class="line">      dp[i][j] = min(dp[i][j - <span class="number">1</span>] + <span class="number">1</span>, min(dp[i - <span class="number">1</span>][j] + <span class="number">1</span>, dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + (A[i - <span class="number">1</span>] == B[j - <span class="number">1</span>] ? <span class="number">0</span> : <span class="number">1</span>)));</span><br><span class="line">  <span class="keyword">return</span> dp[al][bl];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// 巡回セールスマン (巡回できない場合は-1を返す)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">traveling_salesman</span>(<span class="params"><span class="keyword">int</span> V, <span class="keyword">int</span> G[MAX_V][MAX_V]</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">int</span> dp[(<span class="number">1</span> &lt;&lt; V)][V];</span><br><span class="line">  REP(i, (<span class="number">1</span> &lt;&lt; V)) REP(j, V) dp[i][j] = INF;</span><br><span class="line">  dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  REP(i, (<span class="number">1</span> &lt;&lt; V))&#123;</span><br><span class="line">    REP(j, V)&#123;</span><br><span class="line">      REP(k, V)&#123;</span><br><span class="line">        <span class="keyword">int</span> mask = (<span class="number">1</span> &lt;&lt; k), cost = G[j][k];</span><br><span class="line">        <span class="keyword">if</span>((i &amp; mask) || cost &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        dp[(i | mask)][k] = min(dp[(i | mask)][k], dp[i][j] + cost);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (dp[(<span class="number">1</span> &lt;&lt; V) - <span class="number">1</span>][<span class="number">0</span>] == INF ? -<span class="number">1</span> : dp[(<span class="number">1</span> &lt;&lt; V) - <span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// 無向中国人郵便配達問題 (グラフの全ての辺を少なくとも一度通る単純とは限らない閉路の中で，最短のものを求める)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span>(<span class="params"><span class="keyword">const</span> vector&lt; vector&lt;P&gt; &gt; &amp;cost, <span class="keyword">int</span> V, <span class="keyword">int</span> s, <span class="keyword">int</span> *closed</span>)</span>&#123;</span><br><span class="line">  priority_queue&lt;P, vector&lt;P&gt;, greater&lt;P&gt; &gt; open;</span><br><span class="line">  open.push(P(<span class="number">0</span>, s));</span><br><span class="line">  REP(i, V) closed[i] = INF;</span><br><span class="line">  closed[s] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(!open.empty())&#123;</span><br><span class="line">    P tmp = open.top(); open.pop();</span><br><span class="line">    <span class="keyword">int</span> now = tmp.second, c = tmp.first;</span><br><span class="line">    <span class="keyword">if</span>(closed[now] &lt; c) <span class="keyword">continue</span>;</span><br><span class="line">    closed[now] = c;</span><br><span class="line">    REP(i, cost[now].size())&#123;</span><br><span class="line">      <span class="keyword">int</span> next = cost[now][i].second, nc = cost[now][i].first;</span><br><span class="line">      <span class="keyword">if</span>(nc == INF || c + nc &gt;= closed[next]) <span class="keyword">continue</span>;</span><br><span class="line">      closed[next] = c + nc;</span><br><span class="line">      open.push(P(closed[next], next));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">chinesePostman</span>(<span class="params"><span class="keyword">const</span> <span class="keyword">int</span> &amp;V, <span class="keyword">const</span> vector&lt; vector&lt;P&gt; &gt; &amp;G</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">  vector&lt;<span class="keyword">int</span>&gt; odds;</span><br><span class="line">  REP(i, V) &#123;</span><br><span class="line">    REP(j, G[i].size())</span><br><span class="line">      total += G[i][j].first;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">int</span>)(G[i].size()) % <span class="number">2</span>) odds.push_back(i);</span><br><span class="line">  &#125;</span><br><span class="line">  total /= <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">int</span> n = odds.size(), N = (<span class="number">1</span> &lt;&lt; n);</span><br><span class="line">  <span class="keyword">int</span> w[n][n]; <span class="comment">// make odd vertices graph</span></span><br><span class="line">  REP(i, n) &#123;</span><br><span class="line">    <span class="keyword">int</span> closed[V];</span><br><span class="line">    dijkstra(G, V, odds[i], closed);</span><br><span class="line">    REP(j, n) w[i][j] = closed[odds[j]];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> dp[N]; <span class="comment">// DP for general matching </span></span><br><span class="line">  REP(S, N) dp[S] = INF;</span><br><span class="line">  dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; N; ++S)</span><br><span class="line">    REP(i, n)</span><br><span class="line">      <span class="keyword">if</span> (!(S &amp; (<span class="number">1</span> &lt;&lt; i)))</span><br><span class="line">        FOR(j, i + <span class="number">1</span>, n)</span><br><span class="line">          <span class="keyword">if</span> (!(S &amp; (<span class="number">1</span> &lt;&lt; j)))</span><br><span class="line">            dp[(S | (<span class="number">1</span> &lt;&lt; i) | (<span class="number">1</span> &lt;&lt; j))] = min(dp[(S | (<span class="number">1</span> &lt;&lt; i) | (<span class="number">1</span> &lt;&lt; j))], dp[S] + w[i][j]);</span><br><span class="line">  <span class="keyword">return</span> total + dp[N - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// 素因数分解</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//昇順に並んで返される</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">prime_factorize</span>(<span class="params"><span class="keyword">int</span> N</span>)</span>&#123;</span><br><span class="line">  vector&lt;<span class="keyword">int</span>&gt; ret;</span><br><span class="line">  FOR(i, <span class="number">2</span>, sqrt(N) + <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">while</span>(!(N % i))&#123;</span><br><span class="line">      ret.push_back(i);</span><br><span class="line">      N /= i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(N &gt; <span class="number">1</span>) ret.push_back(N);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// オイラーのφ関数 (正の整数nについて、1 からnまでの自然数のうちnと互いに素なものの個数)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">eulers_phi</span>(<span class="params"><span class="keyword">int</span> N</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ret = N;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= N; ++i)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(N % i))&#123;</span><br><span class="line">      ret -= ret / i;</span><br><span class="line">      <span class="keyword">while</span>(!(N % i)) N /= i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(N &gt; <span class="number">1</span>) ret -= ret / N;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// 拡張ユークリッドの互除法 (ax + by = 1となる整数x, yを求める)</span></span><br><span class="line"><span class="comment">// 蟻本第1版p120参照</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">extgcd</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">int</span> d = a;</span><br><span class="line">  <span class="keyword">if</span>(b != <span class="number">0</span>)&#123;</span><br><span class="line">    d = extgcd(b, a % b, y, x);</span><br><span class="line">    y -= (a / b) * x;</span><br><span class="line">  &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    x = <span class="number">1</span>;</span><br><span class="line">    y = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// にぶたん</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_search</span>(<span class="params"><span class="keyword">int</span> X</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">int</span> l = -<span class="number">1</span>, r = N;</span><br><span class="line">  <span class="keyword">while</span>(r - l &gt; <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">int</span> Y = (l + r) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="comment">/*条件*/</span>) r = Y;</span><br><span class="line">    <span class="keyword">else</span> l = Y;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// LCA (木の2頂点の共通祖先)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_V = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_LOG_V = <span class="number">17</span>;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; G[MAX_V];</span><br><span class="line"><span class="keyword">int</span> root = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> parent[MAX_LOG_V][MAX_V];</span><br><span class="line"><span class="keyword">int</span> depth[MAX_V];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span>(<span class="params"><span class="keyword">int</span> v, <span class="keyword">int</span> p, <span class="keyword">int</span> d</span>)</span>&#123;</span><br><span class="line">  parent[<span class="number">0</span>][v] = p;</span><br><span class="line">  depth[v] = d;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[v].size(); ++i) <span class="keyword">if</span> (G[v][i] != p) dfs(G[v][i], v, d + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span>(<span class="params"><span class="keyword">int</span> V</span>)</span>&#123;</span><br><span class="line">  dfs(root, -<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k + <span class="number">1</span> &lt; MAX_LOG_V; ++k)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; V; ++v)&#123;</span><br><span class="line">      <span class="keyword">if</span>(parent[k][v] &lt; <span class="number">0</span>) parent[k + <span class="number">1</span>][v] = -<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">else</span> parent[k + <span class="number">1</span>][v] = parent[k][parent[k][v]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span>(<span class="params"><span class="keyword">int</span> u, <span class="keyword">int</span> v</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(depth[u] &gt; depth[v]) swap(u, v);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; MAX_LOG_V; ++k)&#123;</span><br><span class="line">    <span class="keyword">if</span>((depth[v] - depth[u]) &gt;&gt; k &amp; <span class="number">1</span>) v = parent[k][v];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(u == v) <span class="keyword">return</span> u;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> k = MAX_LOG_V - <span class="number">1</span>; k &gt;= <span class="number">0</span>; --k)&#123;</span><br><span class="line">    <span class="keyword">if</span>(parent[k][u] != parent[k][v])&#123;</span><br><span class="line">      u = parent[k][u];</span><br><span class="line">      v = parent[k][v];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> parent[<span class="number">0</span>][u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// 木の2頂点間距離 (LCAがあること前提)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// rootからの距離</span></span><br><span class="line"><span class="keyword">int</span> dist[MAX_V];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_dist</span>(<span class="params"><span class="keyword">int</span> n, <span class="keyword">int</span> now, <span class="keyword">int</span> d</span>)</span>&#123;</span><br><span class="line">  dist[now] = d;</span><br><span class="line">  REP(i, G[now].size())&#123;</span><br><span class="line">    <span class="keyword">int</span> next = G[now][i];</span><br><span class="line">    <span class="keyword">if</span>(dist[next] != -<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">    make_dist(n, next, d + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span>(<span class="params"><span class="keyword">int</span> u, <span class="keyword">int</span> v</span>)</span>&#123;</span><br><span class="line">  memset(dist, -<span class="number">1</span>, <span class="keyword">sizeof</span>(dist));</span><br><span class="line">  <span class="keyword">int</span> N; cin &gt;&gt;N;</span><br><span class="line">  <span class="comment">// 木の隣接リストの入力</span></span><br><span class="line">  REP(i, N - <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b; cin &gt;&gt;a &gt;&gt;b;</span><br><span class="line">    G[a].push_back(b);</span><br><span class="line">    G[b].push_back(a);</span><br><span class="line">  &#125;</span><br><span class="line">  make_dist(N, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  init(N);</span><br><span class="line">  <span class="keyword">return</span> (dist[u] + dist[v] - <span class="number">2</span> * dist[lca(u, v)]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// 座標圧縮</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> v[MAX_YX][MAX_YX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  memset(v, <span class="number">0</span>, <span class="keyword">sizeof</span>(v));</span><br><span class="line">  vector&lt;<span class="keyword">int</span>&gt; L, T, R, B;</span><br><span class="line">  <span class="keyword">set</span>&lt;<span class="keyword">int</span>&gt; Ys, Xs;</span><br><span class="line">  REP(i, N)&#123;</span><br><span class="line">    <span class="keyword">int</span> l, t, r, b;</span><br><span class="line">    cin &gt;&gt;l &gt;&gt;t &gt;&gt;r &gt;&gt;b;</span><br><span class="line">    L.push_back(l);</span><br><span class="line">    T.push_back(t);</span><br><span class="line">    R.push_back(r);</span><br><span class="line">    B.push_back(b);</span><br><span class="line">    Ys.insert(t);</span><br><span class="line">    Ys.insert(b);</span><br><span class="line">    Xs.insert(l);</span><br><span class="line">    Xs.insert(r);</span><br><span class="line">  &#125;</span><br><span class="line">  Ys.insert(-<span class="number">1</span>);</span><br><span class="line">  Ys.insert(<span class="number">1e6</span> + <span class="number">10</span>);</span><br><span class="line">  Xs.insert(-<span class="number">1</span>);</span><br><span class="line">  Xs.insert(<span class="number">1e6</span> + <span class="number">10</span>);</span><br><span class="line">  <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">Y</span>(<span class="params">Ys.begin(</span>), Ys.<span class="title">end</span>(<span class="params"></span>))</span>;</span><br><span class="line">  <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">X</span>(<span class="params">Xs.begin(</span>), Xs.<span class="title">end</span>(<span class="params"></span>))</span>;</span><br><span class="line">  REP(i, N)&#123;</span><br><span class="line">    <span class="keyword">int</span> xl = lower_bound(X.begin(), X.end(), L[i]) - X.begin();</span><br><span class="line">    <span class="keyword">int</span> xr = lower_bound(X.begin(), X.end(), R[i]) - X.begin();</span><br><span class="line">    <span class="keyword">int</span> yt = lower_bound(Y.begin(), Y.end(), T[i]) - Y.begin();</span><br><span class="line">    <span class="keyword">int</span> yb = lower_bound(Y.begin(), Y.end(), B[i]) - Y.begin();</span><br><span class="line">    FOR(x, xl, xr)&#123;</span><br><span class="line">      FOR(y, yb, yt)&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> bit = (<span class="number">1</span>LL &lt;&lt; i);</span><br><span class="line">        v[x][y] |= bit;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// 二次元累積和</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  REP(i, H) REP(j, W) cin &gt;&gt;v[i][j];</span><br><span class="line">  memset(E, <span class="number">0</span>, <span class="keyword">sizeof</span>(E));</span><br><span class="line">  E[<span class="number">0</span>][<span class="number">0</span>] = v[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">  FOR(i, <span class="number">1</span>, H) E[i][<span class="number">0</span>] = E[i - <span class="number">1</span>][<span class="number">0</span>] + v[i][<span class="number">0</span>];</span><br><span class="line">  FOR(i, <span class="number">1</span>, W) E[<span class="number">0</span>][i] = E[<span class="number">0</span>][i - <span class="number">1</span>] + v[<span class="number">0</span>][i];</span><br><span class="line">  FOR(y, <span class="number">1</span>, H)</span><br><span class="line">    FOR(x, <span class="number">1</span>, W)</span><br><span class="line">    E[y][x] = v[y][x] + E[y - <span class="number">1</span>][x] + E[y][x - <span class="number">1</span>] - E[y - <span class="number">1</span>][x - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span>(<span class="params"><span class="keyword">int</span> Y1, <span class="keyword">int</span> X1, <span class="keyword">int</span> Y2, <span class="keyword">int</span> X2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ret = E[Y2][X2];</span><br><span class="line">  <span class="keyword">if</span>(X1 - <span class="number">1</span> &gt;= <span class="number">0</span>) ret -= E[Y2][X1 - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span>(Y1 - <span class="number">1</span> &gt;= <span class="number">0</span>) ret -= E[Y1 - <span class="number">1</span>][X2];</span><br><span class="line">  <span class="keyword">if</span>(X1 - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; Y1 - <span class="number">1</span> &gt;= <span class="number">0</span>) ret += E[Y1 - <span class="number">1</span>][X1 - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// iCjの組み合わせ</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> C[MAX_N][MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pascals_triangle</span>(<span class="params"><span class="keyword">int</span> N</span>)</span>&#123;</span><br><span class="line">  REP(i, N + <span class="number">1</span>) C[i][<span class="number">0</span>] = C[i][i] = <span class="number">1.0</span>;</span><br><span class="line">  FOR(i, <span class="number">1</span>, N + <span class="number">1</span>)&#123;</span><br><span class="line">    FOR(j, <span class="number">1</span>, i + <span class="number">1</span>)</span><br><span class="line">      C[i][j] = C[i - <span class="number">1</span>][j] + C[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// iCjの確率</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> C[MAX_N][MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pascals_triangle</span>(<span class="params"><span class="keyword">int</span> N</span>)</span>&#123;</span><br><span class="line">  C[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1.0</span>;</span><br><span class="line">  FOR(i, <span class="number">1</span>, N + <span class="number">1</span>)&#123;</span><br><span class="line">    C[i][<span class="number">0</span>] = C[i - <span class="number">1</span>][<span class="number">0</span>] / <span class="number">2.0</span>;</span><br><span class="line">    FOR(j, <span class="number">1</span>, i + <span class="number">1</span>)</span><br><span class="line">      C[i][j] = (C[i - <span class="number">1</span>][j] + C[i - <span class="number">1</span>][j - <span class="number">1</span>]) / <span class="number">2.0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// B^N</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">power</span>(<span class="params"><span class="keyword">double</span> B, <span class="keyword">int</span> N</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">double</span> ret = B;</span><br><span class="line">  REP(i, N) ret *= B;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// Nの倍数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ref</span>: http:<span class="comment">//www004.upp.so-net.ne.jp/s_honma/number/multiple.htm</span></span><br><span class="line"></span><br><span class="line">２	・・・	　一の位が２の倍数</span><br><span class="line">３	・・・	　各位の数の和が３の倍数</span><br><span class="line">４	・・・	　・下二桁が４の倍数</span><br><span class="line">              ・一の位を２で割った数を十の位に足した数が偶数</span><br><span class="line">５	・・・	　一の位が５の倍数</span><br><span class="line">６	・・・	　２かつ３の倍数</span><br><span class="line">７	・・・	　・３桁毎に交互に足したり引いたりしてできた数が７の倍数</span><br><span class="line">              ・３桁の数 ａｂｃ で、ａｂ－２ｃ が７の倍数（→詳細は、こちら）</span><br><span class="line">              　一般に、１０ｐ＋ｑ において、ｐ－２ｑ が７の倍数（→詳細はこちら）</span><br><span class="line">              ・３桁の数 ａｂｃ で、２ａ＋ｂｃ が７の倍数（→詳細は、こちら）</span><br><span class="line">              　一般に、１００ｐ＋ｑ において、２ｐ＋ｑ が７の倍数（→詳細はこちら）</span><br><span class="line">              ・６桁の場合、２桁毎に７で割った余りを考え、それらの数で出来る２桁の</span><br><span class="line">              　整数の差が７の倍数（→詳細は、こちら）</span><br><span class="line">８	・・・	　・下３桁が８の倍数</span><br><span class="line">              ・一の位を２で割り十の位に足して２で割った数を百の位に足した数が偶数</span><br><span class="line">９	・・・	　各位の数の和が９の倍数</span><br><span class="line">１０	・・・	　一の位が０</span><br><span class="line">１１	・・・	　各位の数を交互に足したり引いたりしてできた数が１１の倍数(奇数桁目の合計と偶数桁目の合計の差が<span class="number">11</span>の倍数)</span><br><span class="line">１２	・・・	　３かつ４の倍数</span><br><span class="line">１３	・・・	　７の倍数の判定と同じ</span><br><span class="line">１４	・・・	　２かつ７の倍数</span><br><span class="line">１５	・・・	　３かつ５の倍数</span><br><span class="line">１６	・・・	　下４桁を２で割った数が８の倍数（下４桁を４で割った数が４の倍数）</span><br><span class="line">１７	・・・	　・十位以上の数から一位の数の５倍を引いた数が１７の倍数</span><br><span class="line">                ・２桁毎に下位から２のべきを掛けて交互に足したり引いたりしてできた数が１７の倍数</span><br><span class="line">１８	・・・	　２かつ９の倍数</span><br><span class="line">１９	・・・	　各位の数に上位から２のべきを掛けて足した数が１９の倍数</span><br><span class="line">２０	・・・	　４かつ５の倍数</span><br><span class="line">２１	・・・	　３かつ７の倍数</span><br><span class="line">２２	・・・	　２かつ１１の倍数</span><br><span class="line">２３	・・・	　十位以上の数と一位の数の７倍の和が２３の倍数</span><br><span class="line">２４	・・・	　３かつ８の倍数</span><br><span class="line">３７	・・・	　３桁毎に区分けした数を足した数が３７の倍数</span><br><span class="line">９９９	・・・	３桁毎に区分けした数を足した数が９９９の倍数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// サイコロ</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,-<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;-<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> H[<span class="number">6</span>][<span class="number">6</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>&#125;, <span class="comment">// North : 奥へ移動   ( y:-1 )</span></span><br><span class="line">    &#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>&#125;, <span class="comment">// East  : 右へ移動   ( x:+1 )</span></span><br><span class="line">    &#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">3</span>&#125;, <span class="comment">// West  : 左へ移動   ( x:-1 )</span></span><br><span class="line">    &#123;<span class="number">4</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>&#125;, <span class="comment">// South : 手前へ移動 ( y:+1 )</span></span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125;, <span class="comment">// Right : 右回りに回転 (移動なし)</span></span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>&#125;  <span class="comment">// Left  : 左回りに回転 (移動なし)</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// サイコロライブラリ</span></span><br><span class="line"><span class="comment">// d[0] := top,   d[1] := front </span></span><br><span class="line"><span class="comment">// d[2] := right, d[3] := left</span></span><br><span class="line"><span class="comment">// d[4] := back,  d[5] := bottom</span></span><br><span class="line"><span class="keyword">enum</span>&#123;TOP, FRONT, RIGHT, LEFT, BACK, BOTTOM&#125;;</span><br><span class="line"><span class="keyword">struct</span> Cube&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; d;</span><br><span class="line">    <span class="comment">// コンストラクタで初期化</span></span><br><span class="line">    Cube(vector&lt;<span class="keyword">int</span>&gt; v)&#123;</span><br><span class="line">        <span class="keyword">if</span>( v.size() == <span class="number">6</span> )</span><br><span class="line">            d = v;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            d = vector&lt;<span class="keyword">int</span>&gt;(<span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Cube()&#123; d = vector&lt;<span class="keyword">int</span>&gt;(<span class="number">6</span>); &#125;</span><br><span class="line">    <span class="comment">// dirの方向に回転 (副作用なし)</span></span><br><span class="line">    <span class="function">Cube <span class="title">roll</span>(<span class="params"><span class="keyword">int</span> dir</span>)</span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">d_</span>(<span class="params"><span class="number">6</span></span>)</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">6</span> ; i++ )&#123;</span><br><span class="line">            d_[i] = d[ H[dir][i] ];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Cube(d_);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Cube の順序を定義 (map&lt;Cube,T&gt; を使いたいとき用)</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Cube&amp; a, <span class="keyword">const</span> Cube&amp; b)&#123;</span><br><span class="line">    <span class="keyword">if</span>( a.d[<span class="number">0</span>] == b.d[<span class="number">0</span>] )</span><br><span class="line">        <span class="keyword">return</span> a.d[<span class="number">1</span>] &lt; b.d[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> a.d[<span class="number">0</span>] &lt; b.d[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// 最小費用流</span></span><br><span class="line"></span><br><span class="line">typedef pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> edge &#123; <span class="keyword">int</span> to, cap, cost, rev; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> V;</span><br><span class="line">vector&lt;edge&gt; G[MAX_V]; <span class="comment">//グラフの隣接リスト表現</span></span><br><span class="line"><span class="keyword">int</span> h[MAX_V]; <span class="comment">//ポテンシャル</span></span><br><span class="line"><span class="keyword">int</span> dist[MAX_V]; <span class="comment">//最短距離</span></span><br><span class="line"><span class="keyword">int</span> prevv[MAX_V], preve[MAX_V]; <span class="comment">// 直前の頂点と辺</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span>(<span class="params"><span class="keyword">int</span> <span class="keyword">from</span>, <span class="keyword">int</span> to, <span class="keyword">int</span> cap, <span class="keyword">int</span> cost</span>)</span>&#123;</span><br><span class="line">  G[<span class="keyword">from</span>].push_back((edge)&#123;to, cap, cost, G[to].size())&#125;);</span><br><span class="line">  G[to].push_back((edge)&#123;<span class="keyword">from</span>, <span class="number">0</span>, -cost, (<span class="keyword">int</span>)(G[<span class="keyword">from</span>].size()) - <span class="number">1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sからtへの流量fの最小費用流</span></span><br><span class="line"><span class="comment">// 流せない場合は-1を返す</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min_cost_flow</span>(<span class="params"><span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> f</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">  fill(h, h + V, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">while</span>(f &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    priority_queue&lt;P, vector&lt;P&gt;, greater&lt;P&gt; &gt; que;</span><br><span class="line">    fill(dist, dist + V, INF);</span><br><span class="line">    dist[s] = <span class="number">0</span>;</span><br><span class="line">    que.push(P(<span class="number">0</span>, s));</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">      P p = que.top(); que.pop();</span><br><span class="line">      <span class="keyword">int</span> v = p.second;</span><br><span class="line">      <span class="keyword">if</span>(dist[v] &lt; p.first) <span class="keyword">continue</span>;</span><br><span class="line">      REP(i, G[v].size())&#123;</span><br><span class="line">        edge &amp;e = G[v][i];</span><br><span class="line">        <span class="keyword">if</span>(e.cap &gt; <span class="number">0</span> &amp;&amp; dist[e.to] &gt; dist[v] + e.cost + h[v] - h[e.to])&#123;</span><br><span class="line">          dist[e.to] = dist[v] + e.cost + h[v] - h[e.to];</span><br><span class="line">          prevv[e.to] = v;</span><br><span class="line">          preve[e.to] = i;</span><br><span class="line">          que.push(P(dist[e.to], e.to));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dist[t] == INF) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    REP(v, V) h[v] += dist[v];</span><br><span class="line">    <span class="keyword">int</span> d = f;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v = t; v != s; v = prevv[v]) d = min(d, G[prevv[v]][preve[v]].cap);</span><br><span class="line">    f -= d;</span><br><span class="line">    res += d * h[t];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v = t; v != s; v = prevv[v])&#123;</span><br><span class="line">      edge &amp;e = G[prevv[v]][preve[v]];</span><br><span class="line">      e.cap -= d;</span><br><span class="line">      G[v][e.rev].cap += d;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// ローリングハッシュ</span></span><br><span class="line"></span><br><span class="line">typedef unsigned <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ull B = <span class="number">100000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// aはbに含まれているか</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">contain</span>(<span class="params"><span class="keyword">string</span> a, <span class="keyword">string</span> b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">int</span> al = a.length(), bl = b.length();</span><br><span class="line">  <span class="keyword">if</span>(al &gt; bl) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  ull t = <span class="number">1</span>;</span><br><span class="line">  REP(i, al) t *= B;</span><br><span class="line"></span><br><span class="line">  ull ah = <span class="number">0</span>, bh = <span class="number">0</span>;</span><br><span class="line">  REP(i, al) ah = ah * B + a[i];</span><br><span class="line">  REP(i, al) bh = bh * B + b[i];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i + al &lt;= bl; ++i)&#123;</span><br><span class="line">    <span class="keyword">if</span>(ah == bh) <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// bのi9文字目からのal文字が一致</span></span><br><span class="line">    <span class="keyword">if</span>(i + al &lt; bl) bh = bh * B + b[i + al] - b[i] * t;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// aの末尾とbの先頭を何文字重ねることができるか</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">overlap</span>(<span class="params"><span class="keyword">string</span> a, <span class="keyword">string</span> b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">int</span> al = a.length(), bl = b.length();</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  ull ah = <span class="number">0</span>, bh = <span class="number">0</span>, t = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= min(al, bl); ++i)&#123;</span><br><span class="line">    ah = ah + a[al - i] * t;</span><br><span class="line">    bh = bh * B + b[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(ah == bh) ans = i;</span><br><span class="line">    t *= B;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// Trie木 (rootはmainの先頭で*root = new nodeとして宣言)</span></span><br><span class="line"></span><br><span class="line">typedef <span class="keyword">struct</span> node &#123;</span><br><span class="line">  node *ch[<span class="number">3</span>];</span><br><span class="line">  <span class="keyword">bool</span> exist;</span><br><span class="line">  node() &#123; memset(ch, <span class="number">0</span>, <span class="keyword">sizeof</span>(ch)); exist = <span class="keyword">false</span>; &#125;</span><br><span class="line">&#125; node;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span>(<span class="params">node *root, <span class="keyword">string</span> &amp;s</span>)</span>&#123;</span><br><span class="line">  REP(i, s.length())&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s[i] - <span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">if</span>(root-&gt;ch[n] == NULL) root-&gt;ch[n] = <span class="keyword">new</span> node;</span><br><span class="line">    root = root-&gt;ch[n];</span><br><span class="line">  &#125;</span><br><span class="line">  root-&gt;exist = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span>(<span class="params">node *root, <span class="keyword">string</span> &amp;s, <span class="keyword">int</span> pos, <span class="keyword">int</span> cnt</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(pos &gt;= s.length()) <span class="keyword">return</span> (root-&gt;exist &amp;&amp; cnt == <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">int</span> n = s[pos] - <span class="string">'a'</span>;</span><br><span class="line">  REP(i, <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt &lt; <span class="number">1</span> &amp;&amp; root-&gt;ch[i]) <span class="keyword">if</span>(solve(root-&gt;ch[i], s, pos + <span class="number">1</span>, (n == i ? cnt : cnt + <span class="number">1</span>))) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(cnt &gt;= <span class="number">1</span> &amp;&amp; n == i &amp;&amp; root-&gt;ch[i]) <span class="keyword">if</span>(solve(root-&gt;ch[i], s, pos + <span class="number">1</span>, cnt)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span><span class="xmlDocTag">///</span></span></span><br><span class="line"><span class="comment">// 有理数</span></span><br><span class="line"></span><br><span class="line">typedef <span class="keyword">long</span> <span class="keyword">long</span> Integer;</span><br><span class="line"><span class="function">Integer <span class="title">gcd</span>(<span class="params">Integer a, Integer b</span>) </span>&#123; <span class="keyword">return</span> a &gt; <span class="number">0</span> ? gcd(b % a, a) : b; &#125;</span><br><span class="line"><span class="keyword">struct</span> rational &#123;</span><br><span class="line">  Integer p, q;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">normalize</span>(<span class="params"></span>) </span>&#123; <span class="comment">// keep q positive</span></span><br><span class="line">    <span class="keyword">if</span> (q &lt; <span class="number">0</span>) p *= -<span class="number">1</span>, q *= -<span class="number">1</span>;</span><br><span class="line">    Integer d = gcd(p &lt; <span class="number">0</span> ? -p : p, q);</span><br><span class="line">    <span class="keyword">if</span> (d == <span class="number">0</span>) p = <span class="number">0</span>,  q = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span>        p /= d, q /= d;</span><br><span class="line">  &#125;</span><br><span class="line">  rational(Integer p, Integer q = <span class="number">1</span>) : p(p), q(q) &#123;</span><br><span class="line">    normalize();</span><br><span class="line">  &#125;</span><br><span class="line">  rational &amp;<span class="keyword">operator</span> += (<span class="keyword">const</span> rational &amp;a) &#123;</span><br><span class="line">    p = a.q * p + a.p * q; q = a.q * q; normalize();</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  rational &amp;<span class="keyword">operator</span> -= (<span class="keyword">const</span> rational &amp;a) &#123;</span><br><span class="line">    p = a.q * p - a.p * q; q = a.q * q; normalize();</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  rational &amp;<span class="keyword">operator</span> *= (<span class="keyword">const</span> rational &amp;a) &#123;</span><br><span class="line">    p *= a.p; q *= a.q; normalize();</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  rational &amp;<span class="keyword">operator</span> /= (<span class="keyword">const</span> rational &amp;a) &#123;</span><br><span class="line">    p *= a.q; q *= a.p; normalize();</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  rational &amp;<span class="keyword">operator</span> - () &#123;</span><br><span class="line">    p *= -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">rational <span class="keyword">operator</span> + (<span class="keyword">const</span> rational &amp;a, <span class="keyword">const</span> rational &amp;b) &#123;</span><br><span class="line">  <span class="keyword">return</span> rational(a) += b;</span><br><span class="line">&#125;</span><br><span class="line">rational <span class="keyword">operator</span> * (<span class="keyword">const</span> rational &amp;a, <span class="keyword">const</span> rational &amp;b) &#123;</span><br><span class="line">  <span class="keyword">return</span> rational(a) *= b;</span><br><span class="line">&#125;</span><br><span class="line">rational <span class="keyword">operator</span> - (<span class="keyword">const</span> rational &amp;a, <span class="keyword">const</span> rational &amp;b) &#123;</span><br><span class="line">  <span class="keyword">return</span> rational(a) -= b;</span><br><span class="line">&#125;</span><br><span class="line">rational <span class="keyword">operator</span> / (<span class="keyword">const</span> rational &amp;a, <span class="keyword">const</span> rational &amp;b) &#123;</span><br><span class="line">  <span class="keyword">return</span> rational(a) /= b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> rational &amp;a, <span class="keyword">const</span> rational &amp;b) &#123; <span class="comment">// avoid overflow</span></span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">long</span> <span class="keyword">double</span>) a.p * b.q &lt; (<span class="keyword">long</span> <span class="keyword">double</span>) a.q * b.p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;= (<span class="keyword">const</span> rational &amp;a, <span class="keyword">const</span> rational &amp;b) &#123;</span><br><span class="line">  <span class="keyword">return</span> !(b &lt; a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> rational &amp;a, <span class="keyword">const</span> rational &amp;b) &#123;</span><br><span class="line">  <span class="keyword">return</span> b &lt; a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &gt;= (<span class="keyword">const</span> rational &amp;a, <span class="keyword">const</span> rational &amp;b) &#123;</span><br><span class="line">  <span class="keyword">return</span> !(a &lt; b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> rational &amp;a, <span class="keyword">const</span> rational &amp;b) &#123;</span><br><span class="line">  <span class="keyword">return</span> !(a &lt; b) &amp;&amp; !(b &lt; a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> rational &amp;a, <span class="keyword">const</span> rational &amp;b) &#123;</span><br><span class="line">  <span class="keyword">return</span> (a &lt; b) || (b &lt; a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>ほとんど<a href="http://www.prefield.com/algorithm/" target="_blank" rel="external">Spaghetti Source</a>のコピペです．</p>
<figure class="highlight ]]>
    </summary>
    
      <category term="競プロ" scheme="http://yoursite.com/categories/%E7%AB%B6%E3%83%97%E3%83%AD/"/>
    
      <category term="library" scheme="http://yoursite.com/categories/%E7%AB%B6%E3%83%97%E3%83%AD/library/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[競プロ用C++テンプレート]]></title>
    <link href="http://yoursite.com/2015/12/05/%E7%AB%B6%E3%83%97%E3%83%AD%E7%94%A8C-%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88/"/>
    <id>http://yoursite.com/2015/12/05/競プロ用C-テンプレート/</id>
    <published>2015-12-05T05:00:57.000Z</published>
    <updated>2015-12-09T15:47:21.000Z</updated>
    <content type="html"><![CDATA[<p>テンプレートです．<br>今後競プロ系の記事を上げる際は，主にinclude周りを省略します．</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> REP(i, j) for(int i = <span class="number">0</span>; i &lt; (int)(j); ++i)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FOR(i, j, k) for(int i = (int)(j); i &lt; (int)(k); ++i)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> SORT(v) sort((v).begin(), (v).end())</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> REVERSE(v) reverse((v).begin(), (v).end())</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">complex</span>&lt;<span class="keyword">double</span>&gt; P;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>テンプレートです．<br>今後競プロ系の記事を上げる際は，主にinclude周りを省略します．</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1]]>
    </summary>
    
      <category term="競プロ" scheme="http://yoursite.com/categories/%E7%AB%B6%E3%83%97%E3%83%AD/"/>
    
      <category term="library" scheme="http://yoursite.com/categories/%E7%AB%B6%E3%83%97%E3%83%AD/library/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RailsでSidekiqのログをLTSVで出力する]]></title>
    <link href="http://yoursite.com/2015/12/03/Rails%E3%81%A7Sidekiq%E3%81%AE%E3%83%AD%E3%82%B0%E3%82%92LTSV%E3%81%A7%E5%87%BA%E5%8A%9B%E3%81%99%E3%82%8B/"/>
    <id>http://yoursite.com/2015/12/03/RailsでSidekiqのログをLTSVで出力する/</id>
    <published>2015-12-03T14:42:56.000Z</published>
    <updated>2015-12-09T15:47:35.000Z</updated>
    <content type="html"><![CDATA[<p>これ、置いておきますね。</p>
<figure class="highlight"><figcaption><span>Gemfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem &#39;ltsv&#39;&#10;gem &#39;sidekiq&#39;</span><br></pre></td></tr></table></figure>
<figure class="highlight ruby"><figcaption><span>config/initializers/sidekiq.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SidekiqLtsvFormatter</span> <span class="inheritance">&lt; <span class="parent">Sidekiq::Logging</span></span>::<span class="title">Pretty</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(severity, time, <span class="number">_</span>, message)</span></span></span><br><span class="line">    <span class="string">"<span class="subst">#&#123;<span class="constant">LTSV</span>.dump(&#123;</span><br><span class="line">      <span class="symbol">time:</span> time.utc.iso8601(<span class="number">3</span>),</span><br><span class="line">      <span class="symbol">pid:</span> <span class="constant">::Process</span>.pid,</span><br><span class="line">      <span class="symbol">tid:</span> <span class="constant">Thread</span>.current.object_id.to_s(<span class="number">36</span>),</span><br><span class="line">      <span class="symbol">context:</span> context,</span><br><span class="line">      <span class="symbol">level:</span> severity,</span><br><span class="line">      <span class="symbol">message:</span> message</span><br><span class="line">    &#125;</span>)&#125;\n"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="constant">Sidekiq</span>.logger.formatter = <span class="constant">SidekiqLtsvFormatter</span>.new</span><br></pre></td></tr></table></figure>
<p>だけではあれなので、少し説明をします。</p>
<hr>
<p>Sidekiq gemのログは</p>
<p><a href="https://github.com/mperham/sidekiq/blob/master/lib/sidekiq/logging.rb#L10-L13" target="_blank" rel="external">https://github.com/mperham/sidekiq/blob/master/lib/sidekiq/logging.rb#L10-L13</a></p>
<p>このcallの返り値を出力したものになります。</p>
<p>よって、このcallを何らかの方法で置き換えてあげれば、出力する内容を変えることができます。<br>例えば</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(severity, time, <span class="number">_</span>, message)</span></span></span><br><span class="line">  <span class="string">"ピエールおはよ〜"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>とすると、ログに <code>ピエールおはよ〜ピエールおはよ〜ピエールおはよ〜 ...</code>と出力されるということです。<br>callで改行を行わないと、ログが改行されずに出力されることに注意です。</p>
<p>データをLTSVに成形するために、 <code>ltsv</code> というgemを使っています。<br>使い方の詳細は<a href="https://github.com/condor/ltsv/blob/master/README.md" target="_blank" rel="external">ltsvのREADME</a>参照です。</p>
<p>最後に、Sidekiq.logger.formatterを自作のもので置き換えてあげれば終了です。  </p>
<p>sidekiqの再起動が必要かもしれません。変わらなければ一度再起動をしてみてください。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>これ、置いておきますね。</p>
<figure class="highlight"><figcaption><span>Gemfile</span></figcaption><table><tr><td class="gutter"><pre><span class="l]]>
    </summary>
    
      <category term="ltsv" scheme="http://yoursite.com/tags/ltsv/"/>
    
      <category term="sidekiq" scheme="http://yoursite.com/tags/sidekiq/"/>
    
      <category term="application" scheme="http://yoursite.com/categories/application/"/>
    
      <category term="rails" scheme="http://yoursite.com/categories/application/rails/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[About Me]]></title>
    <link href="http://yoursite.com/2015/12/03/ABOUT-ME/"/>
    <id>http://yoursite.com/2015/12/03/ABOUT-ME/</id>
    <published>2015-12-02T15:00:00.000Z</published>
    <updated>2015-12-05T06:26:01.000Z</updated>
    <content type="html"><![CDATA[<p>玲香です．<br>社内ではすずぴーと呼ばれたりします．</p>
<p>大学時代は競技プログラマーとして生活しており<br>社会に出てからは，インフラエンジニアとして生活をする予定です．(まだ研修中)</p>
<p>GMOペパボというところで働いています．</p>
<p>ブログの内容に，何か不備を見つけましたら，お気軽にコメントもしくはTwitterよりお知らせ下さい．</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>玲香です．<br>社内ではすずぴーと呼ばれたりします．</p>
<p>大学時代は競技プログラマーとして生活しており<br>社会に出てからは，インフラエンジニアとして生活をする予定です．(まだ研修中)</p>
<p>GMOペパボというところで働いています．</p>
<p>ブロ]]>
    </summary>
    
  </entry>
  
</feed>
